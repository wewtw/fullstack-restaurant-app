{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\X\\\\Desktop\\\\MIT-Bootcamp-WebDev\\\\Week29\\\\setting-up-stripe_starter\\\\components\\\\restaurantList.js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { gql, useQuery } from \"@apollo/client\";\nimport Dishes from \"./dishes\";\nimport { useContext, useState } from \"react\";\nimport AppContext from \"./context\";\nimport { Button, Card, CardBody, CardImg, CardText, CardTitle, Container, Row, Col } from \"reactstrap\";\n\nfunction RestaurantList(props) {\n  const {\n    0: restaurantID,\n    1: setRestaurantID\n  } = useState(0);\n  const {\n    cart\n  } = useContext(AppContext);\n  const {\n    0: state,\n    1: setState\n  } = useState(cart);\n  const GET_RESTAURANTS = gql`\n    query {\n      restaurants {\n        id\n        name\n        description\n        image {\n          url\n        }\n        dishes {\n          id\n          name\n          price\n          image {\n            url\n          }\n        }\n        drinks {\n          id\n          name\n          price\n        }\n      }\n    }\n  `;\n  const {\n    loading,\n    error,\n    data\n  } = useQuery(GET_RESTAURANTS);\n  if (loading) return __jsx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 23\n    }\n  }, \"Loading...\");\n  if (error) return __jsx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 21\n    }\n  }, \"ERROR\");\n  if (!data) return __jsx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 21\n    }\n  }, \"Not found\");\n  console.log(`Query Data: ${data.restaurants}`);\n  let searchQuery = data.restaurants.filter(restaurant => {\n    const nameMatch = restaurant.name.toLowerCase().includes(props.search.toLowerCase());\n    const dishMatch = restaurant.dishes.some(dish => dish.name.toLowerCase().includes(props.search.toLowerCase()));\n    const drinkMatch = restaurant.drinks.some(drink => drink.name.toLowerCase().includes(props.search.toLowerCase()));\n    return nameMatch || dishMatch || drinkMatch;\n  });\n  let restId;\n\n  if (searchQuery.length > 0) {\n    restId = searchQuery[0].id;\n  }\n\n  const renderItems = items => {\n    return items.map(item => __jsx(Col, {\n      xs: \"6\",\n      sm: \"4\",\n      key: item.id,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 7\n      }\n    }, __jsx(Card, {\n      style: {\n        margin: \"0 0.5rem 20px 0.5rem\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 9\n      }\n    }, __jsx(CardBody, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 11\n      }\n    }, __jsx(CardTitle, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 13\n      }\n    }, item.name), __jsx(CardText, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 13\n      }\n    }, item.description), __jsx(CardText, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 13\n      }\n    }, item.price), __jsx(Button, {\n      color: \"info\",\n      onClick: () => {\n        setState([...state, item]);\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 13\n      }\n    }, \"Add to Cart\")))));\n  };\n\n  const renderDishes = restaurant => {\n    return restaurant.dishes ? __jsx(React.Fragment, null, __jsx(\"h2\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 9\n      }\n    }, \"Dishes\"), __jsx(Row, {\n      xs: \"3\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 9\n      }\n    }, renderItems(restaurant.dishes))) : null;\n  };\n\n  const renderDrinks = restaurant => {\n    return restaurant.drinks ? __jsx(React.Fragment, null, __jsx(\"h2\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 9\n      }\n    }, \"Drinks\"), __jsx(Row, {\n      xs: \"3\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 9\n      }\n    }, renderItems(restaurant.drinks))) : null;\n  };\n\n  if (searchQuery.length > 0) {\n    const restList = searchQuery.map(restaurant => __jsx(Col, {\n      xs: \"6\",\n      sm: \"4\",\n      key: restaurant.id,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 7\n      }\n    }, __jsx(Card, {\n      style: {\n        margin: \"0 0.5rem 20px 0.5rem\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 9\n      }\n    }, __jsx(CardImg, {\n      top: true,\n      style: {\n        height: 200\n      },\n      src: `http://localhost:1337 + restaurant.image.url`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 11\n      }\n    }), __jsx(CardBody, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 11\n      }\n    }, __jsx(CardText, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 13\n      }\n    }, restaurant.description)), __jsx(\"div\", {\n      className: \"card-footer\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 11\n      }\n    }, __jsx(Button, {\n      color: \"info\",\n      onClick: () => setRestaurantID(restaurant.id),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 13\n      }\n    }, restaurant.name)), restaurantID === restaurant.id && __jsx(React.Fragment, null, renderDishes(restaurant), renderDrinks(restaurant)))));\n    return __jsx(Container, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 138,\n        columnNumber: 7\n      }\n    }, __jsx(Row, {\n      xs: \"3\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 139,\n        columnNumber: 9\n      }\n    }, restList));\n  } else {\n    return __jsx(\"h1\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 143,\n        columnNumber: 12\n      }\n    }, \"No Restaurants Found\");\n  }\n}\n\nexport default RestaurantList;","map":{"version":3,"sources":["C:/Users/X/Desktop/MIT-Bootcamp-WebDev/Week29/setting-up-stripe_starter/components/restaurantList.js"],"names":["gql","useQuery","Dishes","useContext","useState","AppContext","Button","Card","CardBody","CardImg","CardText","CardTitle","Container","Row","Col","RestaurantList","props","restaurantID","setRestaurantID","cart","state","setState","GET_RESTAURANTS","loading","error","data","console","log","restaurants","searchQuery","filter","restaurant","nameMatch","name","toLowerCase","includes","search","dishMatch","dishes","some","dish","drinkMatch","drinks","drink","restId","length","id","renderItems","items","map","item","margin","description","price","renderDishes","renderDrinks","restList","height"],"mappings":"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","sourcesContent":["import { gql, useQuery } from \"@apollo/client\";\nimport Dishes from \"./dishes\";\nimport { useContext, useState } from \"react\";\n\nimport AppContext from \"./context\";\nimport {\n  Button,\n  Card,\n  CardBody,\n  CardImg,\n  CardText,\n  CardTitle,\n  Container,\n  Row,\n  Col,\n} from \"reactstrap\";\n\nfunction RestaurantList(props) {\n  const [restaurantID, setRestaurantID] = useState(0);\n  const { cart } = useContext(AppContext);\n  const [state, setState] = useState(cart);\n  const GET_RESTAURANTS = gql`\n    query {\n      restaurants {\n        id\n        name\n        description\n        image {\n          url\n        }\n        dishes {\n          id\n          name\n          price\n          image {\n            url\n          }\n        }\n        drinks {\n          id\n          name\n          price\n        }\n      }\n    }\n  `;\n  const { loading, error, data } = useQuery(GET_RESTAURANTS);\n  if (loading) return <p>Loading...</p>;\n  if (error) return <p>ERROR</p>;\n  if (!data) return <p>Not found</p>;\n  console.log(`Query Data: ${data.restaurants}`);\n\n  let searchQuery = data.restaurants.filter((restaurant) => {\n    const nameMatch = restaurant.name\n      .toLowerCase()\n      .includes(props.search.toLowerCase());\n    const dishMatch = restaurant.dishes.some((dish) =>\n      dish.name.toLowerCase().includes(props.search.toLowerCase())\n    );\n    const drinkMatch = restaurant.drinks.some((drink) =>\n      drink.name.toLowerCase().includes(props.search.toLowerCase())\n    );\n    return nameMatch || dishMatch || drinkMatch;\n  });\n\n  let restId;\n  if (searchQuery.length > 0) {\n    restId = searchQuery[0].id;\n  }\n  const renderItems = (items) => {\n    return items.map((item) => (\n      <Col xs=\"6\" sm=\"4\" key={item.id}>\n        <Card style={{ margin: \"0 0.5rem 20px 0.5rem\" }}>\n          <CardBody>\n            <CardTitle>{item.name}</CardTitle>\n            <CardText>{item.description}</CardText>\n            <CardText>{item.price}</CardText>\n            <Button\n              color=\"info\"\n              onClick={() => {\n                setState([...state, item]);\n              }}\n            >\n              Add to Cart\n            </Button>\n          </CardBody>\n        </Card>\n      </Col>\n    ));\n  };\n\n  const renderDishes = (restaurant) => {\n    return restaurant.dishes ? (\n      <>\n        <h2>Dishes</h2>\n        <Row xs=\"3\">{renderItems(restaurant.dishes)}</Row>\n      </>\n    ) : null;\n  };\n\n  const renderDrinks = (restaurant) => {\n    return restaurant.drinks ? (\n      <>\n        <h2>Drinks</h2>\n        <Row xs=\"3\">{renderItems(restaurant.drinks)}</Row>\n      </>\n    ) : null;\n  };\n\n  if (searchQuery.length > 0) {\n    const restList = searchQuery.map((restaurant) => (\n      <Col xs=\"6\" sm=\"4\" key={restaurant.id}>\n        <Card style={{ margin: \"0 0.5rem 20px 0.5rem\" }}>\n          <CardImg\n            top={true}\n            style={{ height: 200 }}\n            src={`http://localhost:1337 + restaurant.image.url`}\n          />\n          <CardBody>\n            <CardText>{restaurant.description}</CardText>\n          </CardBody>\n          <div className=\"card-footer\">\n            <Button color=\"info\" onClick={() => setRestaurantID(restaurant.id)}>\n              {restaurant.name}\n            </Button>\n          </div>\n          {restaurantID === restaurant.id && (\n            <>\n              {renderDishes(restaurant)}\n              {renderDrinks(restaurant)}\n            </>\n          )}\n        </Card>\n      </Col>\n    ));\n\n    return (\n      <Container>\n        <Row xs=\"3\">{restList}</Row>\n      </Container>\n    );\n  } else {\n    return <h1>No Restaurants Found</h1>;\n  }\n}\n\nexport default RestaurantList;\n"]},"metadata":{},"sourceType":"module"}