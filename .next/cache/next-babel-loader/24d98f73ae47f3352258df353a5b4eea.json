{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\X\\\\Desktop\\\\MIT-Bootcamp-WebDev\\\\Week29\\\\setting-up-stripe_starter\\\\pages\\\\receipts.js\",\n    _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\nimport React, { useState, useEffect } from \"react\";\nimport { getUserFromLocalStorage } from \"../components/auth\"; //importing the getUserFromLocalStorage function to get the currently logged in user. step-1.\n\nfunction Receipts() {\n  _s();\n\n  var _this = this;\n\n  var _useState = useState([]),\n      orders = _useState[0],\n      setOrders = _useState[1]; //hook will store list of orders. step-2\n\n\n  var API_URL = process.env.NEXT_PUBLIC_API_URL || \"http://localhost:1337\"; //set up the api url. step-3.\n\n  useEffect(function () {\n    //hook to fetch the orders data from the Strapi API, using the logged in user's ID as a query parameter.step-4.\n    var fetchData = /*#__PURE__*/function () {\n      var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        var user, response, data;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.prev = 0;\n                user = getUserFromLocalStorage();\n\n                if (user) {\n                  _context.next = 5;\n                  break;\n                }\n\n                console.log(\"User not found in local storage\");\n                return _context.abrupt(\"return\");\n\n              case 5:\n                _context.next = 7;\n                return fetch(\"\".concat(API_URL, \"/orders?user=\").concat(user.id), {\n                  headers: {\n                    Authorization: \"Bearer \".concat(user.jwt)\n                  }\n                });\n\n              case 7:\n                response = _context.sent;\n                _context.next = 10;\n                return response.json();\n\n              case 10:\n                data = _context.sent;\n                setOrders(data);\n                _context.next = 17;\n                break;\n\n              case 14:\n                _context.prev = 14;\n                _context.t0 = _context[\"catch\"](0);\n                console.log(_context.t0);\n\n              case 17:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, null, [[0, 14]]);\n      }));\n\n      return function fetchData() {\n        return _ref.apply(this, arguments);\n      };\n    }();\n\n    fetchData();\n  }, []); //map orders. step-5.\n  //divded the amount by 100 to fix to a dollar.\n  //added a new status field. admin can set status in the panel. \n  //next step make a new page just for workers who can set status to shiped or delivered.   \n\n  return __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 5\n    }\n  }, __jsx(\"h1\", {\n    style: {\n      fontSize: \"2rem\",\n      marginBottom: \"1rem\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 7\n    }\n  }, \"Order History\"), orders.map(function (order, index) {\n    return __jsx(\"div\", {\n      key: order.id,\n      style: {\n        border: \"1px solid #ccc\",\n        backgroundimage: \"linear-gradient to right, red , yellow\",\n        padding: \"1rem\",\n        marginBottom: index === orders.length - 1 ? 0 : \"1rem\"\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 9\n      }\n    }, __jsx(\"p\", {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 11\n      }\n    }, \"Order ID: \", order.id), __jsx(\"p\", {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 11\n      }\n    }, \"Amount: $\", order.amount / 100), __jsx(\"p\", {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 11\n      }\n    }, \"Status: \", order.status));\n  }));\n}\n\n_s(Receipts, \"FvMuVccH6DXI6fqfhJiN/VsjZaw=\");\n\n_c = Receipts;\nexport default Receipts;\n\nvar _c;\n\n$RefreshReg$(_c, \"Receipts\");","map":{"version":3,"sources":["C:/Users/X/Desktop/MIT-Bootcamp-WebDev/Week29/setting-up-stripe_starter/pages/receipts.js"],"names":["React","useState","useEffect","getUserFromLocalStorage","Receipts","orders","setOrders","API_URL","process","env","NEXT_PUBLIC_API_URL","fetchData","user","console","log","fetch","id","headers","Authorization","jwt","response","json","data","fontSize","marginBottom","map","order","index","border","backgroundimage","padding","length","amount","status"],"mappings":";;;;;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,SAASC,uBAAT,QAAwC,oBAAxC,C,CACA;;AACA,SAASC,QAAT,GAAoB;AAAA;;AAAA;;AAAA,kBACUH,QAAQ,CAAC,EAAD,CADlB;AAAA,MACXI,MADW;AAAA,MACHC,SADG,iBACuB;;;AACzC,MAAMC,OAAO,GAAGC,OAAO,CAACC,GAAR,CAAYC,mBAAZ,IAAmC,uBAAnD,CAFkB,CAE0D;;AAE5ER,EAAAA,SAAS,CAAC,YAAM;AAAC;AACf,QAAMS,SAAS;AAAA,0EAAG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAERC,gBAAAA,IAFQ,GAEDT,uBAAuB,EAFtB;;AAAA,oBAGTS,IAHS;AAAA;AAAA;AAAA;;AAIZC,gBAAAA,OAAO,CAACC,GAAR,CAAY,iCAAZ;AAJY;;AAAA;AAAA;AAAA,uBAQSC,KAAK,WAAIR,OAAJ,0BAA2BK,IAAI,CAACI,EAAhC,GAAsC;AAChEC,kBAAAA,OAAO,EAAE;AACPC,oBAAAA,aAAa,mBAAYN,IAAI,CAACO,GAAjB;AADN;AADuD,iBAAtC,CARd;;AAAA;AAQRC,gBAAAA,QARQ;AAAA;AAAA,uBAcKA,QAAQ,CAACC,IAAT,EAdL;;AAAA;AAcRC,gBAAAA,IAdQ;AAedhB,gBAAAA,SAAS,CAACgB,IAAD,CAAT;AAfc;AAAA;;AAAA;AAAA;AAAA;AAiBdT,gBAAAA,OAAO,CAACC,GAAR;;AAjBc;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAH;;AAAA,sBAATH,SAAS;AAAA;AAAA;AAAA,OAAf;;AAqBAA,IAAAA,SAAS;AACV,GAvBQ,EAuBN,EAvBM,CAAT,CAJkB,CA4BlB;AACA;AACA;AACA;;AACA,SACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAI,IAAA,KAAK,EAAE;AAAEY,MAAAA,QAAQ,EAAE,MAAZ;AAAoBC,MAAAA,YAAY,EAAE;AAAlC,KAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBADF,EAEGnB,MAAM,CAACoB,GAAP,CAAW,UAACC,KAAD,EAAQC,KAAR;AAAA,WACV;AAAK,MAAA,GAAG,EAAED,KAAK,CAACV,EAAhB;AAAoB,MAAA,KAAK,EAAE;AACvBY,QAAAA,MAAM,EAAE,gBADe;AAEvBC,QAAAA,eAAe,EAAE,wCAFM;AAGvBC,QAAAA,OAAO,EAAE,MAHc;AAGNN,QAAAA,YAAY,EAAEG,KAAK,KAAKtB,MAAM,CAAC0B,MAAP,GAAgB,CAA1B,GAA8B,CAA9B,GAAkC;AAH1C,OAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAIE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAAcL,KAAK,CAACV,EAApB,CAJF,EAKE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAAaU,KAAK,CAACM,MAAN,GAAe,GAA5B,CALF,EAME;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAAYN,KAAK,CAACO,MAAlB,CANF,CADU;AAAA,GAAX,CAFH,CADF;AAeD;;GA/CQ7B,Q;;KAAAA,Q;AAiDT,eAAeA,QAAf","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport { getUserFromLocalStorage } from \"../components/auth\";\r\n//importing the getUserFromLocalStorage function to get the currently logged in user. step-1.\r\nfunction Receipts() {\r\n  const [orders, setOrders] = useState([]);//hook will store list of orders. step-2\r\n  const API_URL = process.env.NEXT_PUBLIC_API_URL || \"http://localhost:1337\"; //set up the api url. step-3.\r\n\r\n  useEffect(() => {//hook to fetch the orders data from the Strapi API, using the logged in user's ID as a query parameter.step-4.\r\n    const fetchData = async () => {\r\n      try {\r\n        const user = getUserFromLocalStorage();\r\n        if (!user) {\r\n          console.log(\"User not found in local storage\");\r\n          return;\r\n        }\r\n\r\n        const response = await fetch(`${API_URL}/orders?user=${user.id}`, {\r\n          headers: {\r\n            Authorization: `Bearer ${user.jwt}`,\r\n          },\r\n        });\r\n\r\n        const data = await response.json();\r\n        setOrders(data);\r\n      } catch (error) {\r\n        console.log(error);\r\n      }\r\n    };\r\n\r\n    fetchData();\r\n  }, []);\r\n  //map orders. step-5.\r\n  //divded the amount by 100 to fix to a dollar.\r\n  //added a new status field. admin can set status in the panel. \r\n  //next step make a new page just for workers who can set status to shiped or delivered.   \r\n  return (\r\n    <div>\r\n      <h1 style={{ fontSize: \"2rem\", marginBottom: \"1rem\" }}>Order History</h1>\r\n      {orders.map((order, index) => (\r\n        <div key={order.id} style={{ \r\n            border: \"1px solid #ccc\",\r\n            backgroundimage: \"linear-gradient to right, red , yellow\",\r\n            padding: \"1rem\", marginBottom: index === orders.length - 1 ? 0 : \"1rem\"}}>\r\n          <p>Order ID: {order.id}</p>\r\n          <p>Amount: ${order.amount / 100}</p>\r\n          <p>Status: {order.status}</p>\r\n        </div>\r\n      ))}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Receipts;\r\n"]},"metadata":{},"sourceType":"module"}