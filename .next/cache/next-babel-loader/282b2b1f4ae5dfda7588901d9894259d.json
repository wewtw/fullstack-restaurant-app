{"ast":null,"code":"import _taggedTemplateLiteral from \"@babel/runtime/helpers/esm/taggedTemplateLiteral\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\X\\\\Desktop\\\\MIT-Bootcamp-WebDev\\\\Week29\\\\setting-up-stripe_starter\\\\components\\\\restaurantList.js\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n    query {\\n      restaurants {\\n        id\\n        name\\n        description\\n        image {\\n          url\\n        }\\n      }\\n    }\\n  \"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport { gql, useQuery } from \"@apollo/client\";\nimport Dishes from \"./dishes\";\nimport { useContext, useState, useEffect } from \"react\";\nimport AppContext from \"./context\";\nimport { Button, Card, CardBody, CardImg, CardText, CardTitle, Container, Row, Col } from \"reactstrap\";\n\nfunction RestaurantList(props) {\n  _s();\n\n  var _this = this;\n\n  var _useContext = useContext(AppContext),\n      cart = _useContext.cart;\n\n  var _useState = useState(cart),\n      state = _useState[0],\n      setState = _useState[1];\n\n  var _useState2 = useState(0),\n      restaurantID = _useState2[0],\n      setRestaurantID = _useState2[1]; // initial state is 0\n\n\n  var _useState3 = useState([]),\n      searchQuery = _useState3[0],\n      setSearchQuery = _useState3[1];\n\n  var GET_RESTAURANTS = gql(_templateObject());\n\n  var _useQuery = useQuery(GET_RESTAURANTS),\n      loading = _useQuery.loading,\n      error = _useQuery.error,\n      data = _useQuery.data;\n\n  useEffect(function () {\n    if (data) {\n      // Filter restaurants based on search query\n      var filteredRestaurants = data.restaurants.filter(function (res) {\n        return res.name.toLowerCase().includes(props.search);\n      }); // If the selected restaurant is not found in the filtered results,\n      // reset the selected restaurant to 0\n\n      if (!filteredRestaurants.find(function (res) {\n        return res.id === restaurantID;\n      })) {\n        setRestaurantID(0);\n      }\n\n      setSearchQuery(filteredRestaurants);\n    }\n  }, [props.search, data, restaurantID]);\n  if (loading) return __jsx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 23\n    }\n  }, \"Loading...\");\n  if (error) return __jsx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 21\n    }\n  }, \"ERROR\");\n  if (!data) return __jsx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 21\n    }\n  }, \"Not found\");\n\n  var selectRestaurant = function selectRestaurant(id) {\n    setRestaurantID(id);\n  };\n\n  var renderDishes = function renderDishes() {\n    if (restaurantID !== 0) {\n      return __jsx(Dishes, {\n        restId: restaurantID,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 14\n        }\n      });\n    }\n  };\n\n  var restList = searchQuery.map(function (res) {\n    return __jsx(Col, {\n      xs: \"6\",\n      sm: \"4\",\n      key: res.id,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 5\n      }\n    }, __jsx(Card, {\n      style: {\n        margin: \"0 0.5rem 20px 0.5rem\"\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 7\n      }\n    }, __jsx(CardImg, {\n      top: true,\n      style: {\n        height: 200\n      },\n      src: \"http://localhost:1337\" + res.image.url,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 9\n      }\n    }), __jsx(CardBody, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 9\n      }\n    }, __jsx(CardText, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 11\n      }\n    }, res.description)), __jsx(\"div\", {\n      className: \"card-footer\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 9\n      }\n    }, __jsx(Button, {\n      color: \"info\",\n      onClick: function onClick() {\n        return selectRestaurant(res.id);\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 11\n      }\n    }, res.name))));\n  });\n  return __jsx(Container, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 5\n    }\n  }, __jsx(Row, {\n    xs: \"3\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 7\n    }\n  }, restList), __jsx(Row, {\n    xs: \"3\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 7\n    }\n  }, renderDishes()));\n}\n\n_s(RestaurantList, \"pQh9J87eswDl36Ntf09oeBoQQ3c=\", false, function () {\n  return [useQuery];\n});\n\n_c = RestaurantList;\nexport default RestaurantList;\n\nvar _c;\n\n$RefreshReg$(_c, \"RestaurantList\");","map":{"version":3,"sources":["C:/Users/X/Desktop/MIT-Bootcamp-WebDev/Week29/setting-up-stripe_starter/components/restaurantList.js"],"names":["gql","useQuery","Dishes","useContext","useState","useEffect","AppContext","Button","Card","CardBody","CardImg","CardText","CardTitle","Container","Row","Col","RestaurantList","props","cart","state","setState","restaurantID","setRestaurantID","searchQuery","setSearchQuery","GET_RESTAURANTS","loading","error","data","filteredRestaurants","restaurants","filter","res","name","toLowerCase","includes","search","find","id","selectRestaurant","renderDishes","restList","map","margin","height","image","url","description"],"mappings":"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","sourcesContent":["import { gql, useQuery } from \"@apollo/client\";\nimport Dishes from \"./dishes\";\nimport { useContext, useState, useEffect } from \"react\";\n\nimport AppContext from \"./context\";\nimport {\n  Button,\n  Card,\n  CardBody,\n  CardImg,\n  CardText,\n  CardTitle,\n  Container,\n  Row,\n  Col,\n} from \"reactstrap\";\n\nfunction RestaurantList(props) {\n  const { cart } = useContext(AppContext);\n  const [state, setState] = useState(cart);\n  const [restaurantID, setRestaurantID] = useState(0); // initial state is 0\n  const [searchQuery, setSearchQuery] = useState([]);\n\n  const GET_RESTAURANTS = gql`\n    query {\n      restaurants {\n        id\n        name\n        description\n        image {\n          url\n        }\n      }\n    }\n  `;\n  const { loading, error, data } = useQuery(GET_RESTAURANTS);\n\n  useEffect(() => {\n    if (data) {\n      // Filter restaurants based on search query\n      const filteredRestaurants = data.restaurants.filter((res) =>\n        res.name.toLowerCase().includes(props.search)\n      );\n\n      // If the selected restaurant is not found in the filtered results,\n      // reset the selected restaurant to 0\n      if (!filteredRestaurants.find((res) => res.id === restaurantID)) {\n        setRestaurantID(0);\n      }\n\n      setSearchQuery(filteredRestaurants);\n    }\n  }, [props.search, data, restaurantID]);\n\n  if (loading) return <p>Loading...</p>;\n  if (error) return <p>ERROR</p>;\n  if (!data) return <p>Not found</p>;\n\n  const selectRestaurant = (id) => {\n    setRestaurantID(id);\n  };\n\n  const renderDishes = () => {\n    if (restaurantID !== 0) {\n      return <Dishes restId={restaurantID}></Dishes>;\n    }\n  };\n\n  const restList = searchQuery.map((res) => (\n    <Col xs=\"6\" sm=\"4\" key={res.id}>\n      <Card style={{ margin: \"0 0.5rem 20px 0.5rem\" }}>\n        <CardImg\n          top={true}\n          style={{ height: 200 }}\n          src={`http://localhost:1337` + res.image.url}\n        />\n        <CardBody>\n          <CardText>{res.description}</CardText>\n        </CardBody>\n        <div className=\"card-footer\">\n          <Button color=\"info\" onClick={() => selectRestaurant(res.id)}>\n            {res.name}\n          </Button>\n        </div>\n      </Card>\n    </Col>\n  ));\n\n  return (\n    <Container>\n      <Row xs=\"3\">{restList}</Row>\n      <Row xs=\"3\">{renderDishes()}</Row>\n    </Container>\n  );\n}\n\nexport default RestaurantList;\n"]},"metadata":{},"sourceType":"module"}