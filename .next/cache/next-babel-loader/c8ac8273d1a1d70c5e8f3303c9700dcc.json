{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\X\\\\Desktop\\\\MIT-Bootcamp-WebDev\\\\Week29\\\\setting-up-stripe_starter\\\\components\\\\restaurantList.js\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { useState, useContext } from \"react\";\nimport { gql, useQuery } from \"@apollo/client\";\nimport Dishes from \"./dishes\";\nimport Drinks from \"./drinks\";\nimport AppContext from \"./context\";\nimport { Button, Card, CardBody, CardImg, CardText, CardTitle, Container, Row, Col } from \"reactstrap\";\n\nfunction RestaurantList(props) {\n  const {\n    0: restaurantID,\n    1: setRestaurantID\n  } = useState(0);\n  const {\n    cart\n  } = useContext(AppContext);\n  const {\n    0: state,\n    1: setState\n  } = useState(cart);\n\n  function RestaurantList(props) {\n    const {\n      0: restaurantID,\n      1: setRestaurantID\n    } = useState(0);\n    const {\n      cart\n    } = useContext(AppContext);\n    const {\n      0: state,\n      1: setState\n    } = useState(cart);\n    const GET_RESTAURANTS = gql`\n      query GetRestaurants {\n        restaurants {\n          id\n          name\n          description\n          image {\n            url\n          }\n          dishes {\n            id\n            name\n            description\n            price\n          }\n          drinks {\n            id\n            price\n            name\n            description\n          }\n        }\n      }\n    `;\n    const {\n      loading,\n      error,\n      data\n    } = useQuery(GET_RESTAURANTS, {\n      variables: {\n        id: restaurantID\n      }\n    });\n    if (loading) return __jsx(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 25\n      }\n    }, \"Loading...\");\n\n    if (error) {\n      console.log(error);\n      return __jsx(\"p\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 14\n        }\n      }, \"ERROR\");\n    }\n\n    if (!data) return __jsx(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 23\n      }\n    }, \"Not found\");\n    console.log(`Query Data: ${JSON.stringify(data.restaurants, null, 2)}`);\n    if (loading) return __jsx(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 25\n      }\n    }, \"Loading...\");\n\n    if (error) {\n      console.log(error);\n      return __jsx(\"p\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 40\n        }\n      }, \"ERROR\");\n    }\n\n    if (!data) return __jsx(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 19\n      }\n    }, \"Not found\");\n    console.log(`Query Data: ${data.restaurants}`);\n    const searchQuery = data.restaurants.map(res => {\n      if (res.id === restaurantID) {\n        return _objectSpread(_objectSpread({}, res), {}, {\n          dishes: res.dishes.filter(dish => dish.name.toLowerCase().includes(props.search)),\n          drink: res.drink.filter(drinks => drinks.name.toLowerCase().includes(props.search))\n        });\n      } else {\n        return _objectSpread(_objectSpread({}, res), {}, {\n          dishes: res.dishes.filter(dish => dish.name.toLowerCase().includes(props.search)),\n          drink: res.drink.filter(drinks => drinks.name.toLowerCase().includes(props.search)),\n          showDishes: false,\n          showDrinks: false\n        });\n      }\n    }).filter(res => res.dishes.length + res.drink.length > 0);\n    console.log(`Search Query: ${JSON.stringify(searchQuery, null, 2)}`);\n    const restId = restaurantID;\n\n    const handleRestaurantClick = res => {\n      if (res.id === restaurantID) {\n        setRestaurantID(0); // if already selected, deselect\n      } else {\n        setRestaurantID(res.id);\n      }\n    }; // define renderer for Dishes\n\n\n    const renderDishes = () => {\n      if (restId === 0) return null;\n      const restaurant = data.restaurants.find(res => res.id === restId);\n      if (!restaurant) return null;\n      console.log(`Dishes: ${JSON.stringify(restaurant.dishes, null, 2)}`);\n      return __jsx(Dishes, {\n        restaurant: restaurant,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 112,\n          columnNumber: 14\n        }\n      });\n    };\n\n    const renderDrinks = () => {\n      if (restId === 0) return null;\n      const restaurant = data.restaurants.find(res => res.id === restId);\n      if (!restaurant) return null;\n      console.log(`Drinks: ${JSON.stringify(restaurant.drinks, null, 2)}`);\n      return __jsx(Drinks, {\n        restaurant: restaurant,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 120,\n          columnNumber: 14\n        }\n      });\n    };\n  }\n\n  const restList = searchQuery.map(res => __jsx(Col, {\n    xs: \"6\",\n    sm: \"4\",\n    key: res.id,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 5\n    }\n  }, __jsx(Card, {\n    style: {\n      margin: \"0 0.5rem 20px 0.5rem\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 7\n    }\n  }, __jsx(CardImg, {\n    top: true,\n    style: {\n      height: 200\n    },\n    src: `http://localhost:1337` + res.image.url,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 9\n    }\n  }), __jsx(CardBody, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 9\n    }\n  }, __jsx(CardText, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 11\n    }\n  }, res.description)), __jsx(\"div\", {\n    className: \"card-footer\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 136,\n      columnNumber: 9\n    }\n  }, __jsx(Button, {\n    color: res.id === restaurantID ? \"secondary\" : \"info\",\n    onClick: () => handleRestaurantClick(res),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 11\n    }\n  }, res.name)))));\n  return __jsx(Container, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 149,\n      columnNumber: 5\n    }\n  }, __jsx(Row, {\n    xs: \"3\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 150,\n      columnNumber: 7\n    }\n  }, restList));\n}\n\nexport default RestaurantList;","map":{"version":3,"sources":["C:/Users/X/Desktop/MIT-Bootcamp-WebDev/Week29/setting-up-stripe_starter/components/restaurantList.js"],"names":["React","useState","useContext","gql","useQuery","Dishes","Drinks","AppContext","Button","Card","CardBody","CardImg","CardText","CardTitle","Container","Row","Col","RestaurantList","props","restaurantID","setRestaurantID","cart","state","setState","GET_RESTAURANTS","loading","error","data","variables","id","console","log","JSON","stringify","restaurants","searchQuery","map","res","dishes","filter","dish","name","toLowerCase","includes","search","drink","drinks","showDishes","showDrinks","length","restId","handleRestaurantClick","renderDishes","restaurant","find","renderDrinks","restList","margin","height","image","url","description"],"mappings":"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","sourcesContent":["import React, { useState, useContext } from \"react\";\nimport { gql, useQuery } from \"@apollo/client\";\nimport Dishes from \"./dishes\";\nimport Drinks from \"./drinks\";\nimport AppContext from \"./context\";\nimport {\n  Button,\n  Card,\n  CardBody,\n  CardImg,\n  CardText,\n  CardTitle,\n  Container,\n  Row,\n  Col,\n} from \"reactstrap\";\n\nfunction RestaurantList(props) {\n  const [restaurantID, setRestaurantID] = useState(0);\n  const { cart } = useContext(AppContext);\n  const [state, setState] = useState(cart);\n  function RestaurantList(props) {\n    const [restaurantID, setRestaurantID] = useState(0);\n    const { cart } = useContext(AppContext);\n    const [state, setState] = useState(cart);\n    const GET_RESTAURANTS = gql`\n      query GetRestaurants {\n        restaurants {\n          id\n          name\n          description\n          image {\n            url\n          }\n          dishes {\n            id\n            name\n            description\n            price\n          }\n          drinks {\n            id\n            price\n            name\n            description\n          }\n        }\n      }\n    `;\n  \n    const { loading, error, data } = useQuery(GET_RESTAURANTS, {\n      variables: { id: restaurantID },\n    });\n  \n    if (loading) return <p>Loading...</p>;\n    if (error) {\n      console.log(error);\n      return <p>ERROR</p>;\n    }\n    if (!data) return <p>Not found</p>;\n    console.log(`Query Data: ${JSON.stringify(data.restaurants, null, 2)}`);\n  \n    if (loading) return <p>Loading...</p>;\nif (error) {console.log(error); return <p>ERROR</p>;}\nif (!data) return <p>Not found</p>;\nconsole.log(`Query Data: ${data.restaurants}`);\n\nconst searchQuery = data.restaurants.map((res) => {\n  if (res.id === restaurantID) {\n    return {\n      ...res,\n      dishes: res.dishes.filter((dish) =>\n        dish.name.toLowerCase().includes(props.search)\n      ),\n      drink: res.drink.filter((drinks) =>\n        drinks.name.toLowerCase().includes(props.search)\n      ),\n    };\n  } else {\n    return {\n      ...res,\n      dishes: res.dishes.filter((dish) =>\n        dish.name.toLowerCase().includes(props.search)\n      ),\n      drink: res.drink.filter((drinks) =>\n        drinks.name.toLowerCase().includes(props.search)\n      ),\n      showDishes: false,\n      showDrinks: false,\n    };\n  }\n}).filter((res) => res.dishes.length + res.drink.length > 0);\n\n    console.log(`Search Query: ${JSON.stringify(searchQuery, null, 2)}`);\n  \n    const restId = restaurantID;\n  \n    const handleRestaurantClick = (res) => {\n      if (res.id === restaurantID) {\n        setRestaurantID(0); // if already selected, deselect\n      } else {\n        setRestaurantID(res.id);\n      }\n    };\n  \n    // define renderer for Dishes\n    const renderDishes = () => {\n      if (restId === 0) return null;\n      const restaurant = data.restaurants.find((res) => res.id === restId);\n      if (!restaurant) return null;\n      console.log(`Dishes: ${JSON.stringify(restaurant.dishes, null, 2)}`);\n      return <Dishes restaurant={restaurant} />;\n    };\n  \n    const renderDrinks = () => {\n      if (restId === 0) return null;\n      const restaurant = data.restaurants.find((res) => res.id === restId);\n      if (!restaurant) return null;\n      console.log(`Drinks: ${JSON.stringify(restaurant.drinks, null, 2)}`);\n      return <Drinks restaurant={restaurant} />;\n    };\n  \n  }\n\n  const restList = searchQuery.map((res) => (\n    <Col xs=\"6\" sm=\"4\" key={res.id}>\n      <Card style={{ margin: \"0 0.5rem 20px 0.5rem\" }}>\n        <CardImg\n          top={true}\n          style={{ height: 200 }}\n          src={`http://localhost:1337` + res.image.url}\n        />\n        <CardBody>\n          <CardText>{res.description}</CardText>\n        </CardBody>\n        <div className=\"card-footer\">\n          <Button\n            color={res.id === restaurantID ? \"secondary\" : \"info\"}\n            onClick={() => handleRestaurantClick(res)}\n          >\n            {res.name}\n          </Button>\n        </div>\n      </Card>\n    </Col>\n  ));\n\n  return (\n    <Container>\n      <Row xs=\"3\">{restList}</Row>\n    </Container>\n  );\n}\n\nexport default RestaurantList;\n"]},"metadata":{},"sourceType":"module"}