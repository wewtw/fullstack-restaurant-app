{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\X\\\\Desktop\\\\MIT-Bootcamp-WebDev\\\\Week29\\\\setting-up-stripe_starter\\\\components\\\\restaurantList.js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { gql, useQuery } from '@apollo/client';\nimport Dishes from \"./dishes\";\nimport { useContext, useState } from 'react';\nimport Drinks from \"./drinks\";\nimport AppContext from \"./context\";\nimport { Button, Card, CardBody, CardImg, CardText, CardTitle, Container, Row, Col } from \"reactstrap\";\n\nfunction RestaurantList(props) {\n  const {\n    0: restaurantID,\n    1: setRestaurantID\n  } = useState(0);\n  const {\n    cart\n  } = useContext(AppContext);\n  const {\n    0: state,\n    1: setState\n  } = useState(cart);\n  const GET_RESTAURANTS = gql`\n    query {\n      restaurants {\n        id\n        name\n        description\n        image {\n          url\n        }\n        dishes {\n          id\n          name\n          description\n          price\n        }\n        drinks {\n          id\n          name\n          description\n          price\n        }\n      }\n    }\n  `;\n  const {\n    loading,\n    error,\n    data\n  } = useQuery(GET_RESTAURANTS);\n  if (loading) return __jsx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 23\n    }\n  }, \"Loading...\");\n  if (error) return __jsx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 21\n    }\n  }, \"ERROR\");\n  if (!data) return __jsx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 21\n    }\n  }, \"Not found\");\n  console.log(`Query Data: ${data.restaurants}`);\n  const searchQuery = data.restaurants.map(restaurant => {\n    return _objectSpread(_objectSpread({}, restaurant), {}, {\n      dishes: restaurant.dishes.filter(dish => dish.name.toLowerCase().includes(props.search)),\n      drinks: restaurant.drinks.filter(drink => drink.name.toLowerCase().includes(props.search))\n    });\n  });\n\n  const handleRestaurantClick = id => {\n    const restaurant = searchQuery.find(res => res.id === id);\n\n    if (restaurant) {\n      setRestaurantID(id);\n    } else {\n      setRestaurantID(0);\n    }\n  };\n\n  const restId = searchQuery.length > 0 ? searchQuery[0].id : null; // definet renderer for Dishes\n\n  const renderDishes = () => {\n    if (restaurantID === 0) return null;\n    const restaurant = searchQuery.find(res => res.id === restaurantID);\n    if (!restaurant) return null;\n    return __jsx(Dishes, {\n      dishes: restaurant.dishes,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 10\n      }\n    });\n  };\n\n  const renderDrinks = () => {\n    if (restaurantID === 0) return null;\n    const restaurant = searchQuery.find(res => res.id === restaurantID);\n    if (!restaurant) return null;\n    return __jsx(Drinks, {\n      drinks: restaurant.drinks,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 10\n      }\n    });\n  };\n\n  if (searchQuery.length > 0) {\n    const restList = searchQuery.map(res => __jsx(Col, {\n      xs: \"6\",\n      sm: \"4\",\n      key: res.id,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 5\n      }\n    }, __jsx(Card, {\n      style: {\n        margin: \"0 0.5rem 20px 0.5rem\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 7\n      }\n    }, __jsx(CardImg, {\n      top: true,\n      style: {\n        height: 200\n      },\n      src: `http://localhost:1337` + res.image.url,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 9\n      }\n    }), __jsx(CardBody, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 9\n      }\n    }, __jsx(CardText, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 11\n      }\n    }, res.description)), __jsx(\"div\", {\n      className: \"card-footer\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 9\n      }\n    }, __jsx(Button, {\n      color: \"info\",\n      onClick: () => setRestaurantID(res.id),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 9\n      }\n    }, res.name)))));\n    return __jsx(Container, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 5\n      }\n    }, __jsx(Row, {\n      xs: \"3\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 5\n      }\n    }, restList), __jsx(Row, {\n      xs: \"3\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 5\n      }\n    }, renderDishes(restaurantID)), __jsx(Row, {\n      xs: \"3\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 131,\n        columnNumber: 5\n      }\n    }, renderDrinks(restaurantID)));\n  } else {\n    return __jsx(\"h1\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 139,\n        columnNumber: 10\n      }\n    }, \" No Restaurants Found\");\n  }\n}\n\nexport default RestaurantList;","map":{"version":3,"sources":["C:/Users/X/Desktop/MIT-Bootcamp-WebDev/Week29/setting-up-stripe_starter/components/restaurantList.js"],"names":["gql","useQuery","Dishes","useContext","useState","Drinks","AppContext","Button","Card","CardBody","CardImg","CardText","CardTitle","Container","Row","Col","RestaurantList","props","restaurantID","setRestaurantID","cart","state","setState","GET_RESTAURANTS","loading","error","data","console","log","restaurants","searchQuery","map","restaurant","dishes","filter","dish","name","toLowerCase","includes","search","drinks","drink","handleRestaurantClick","id","find","res","restId","length","renderDishes","renderDrinks","restList","margin","height","image","url","description"],"mappings":"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","sourcesContent":["import {gql,useQuery} from '@apollo/client';\nimport Dishes from \"./dishes\"\nimport {useContext, useState} from 'react';\nimport Drinks from \"./drinks\";\n\nimport AppContext from \"./context\"\n\nimport {\n  Button,\n  Card,\n  CardBody,\n  CardImg,\n  CardText,\n  CardTitle,\n  Container,\n  Row,\n  Col} from \"reactstrap\";\n\n\nfunction RestaurantList(props){\n  const[restaurantID, setRestaurantID] = useState(0)\n  \n  const {cart } = useContext(AppContext);\n  const [state, setState] = useState(cart)\n  const GET_RESTAURANTS = gql`\n    query {\n      restaurants {\n        id\n        name\n        description\n        image {\n          url\n        }\n        dishes {\n          id\n          name\n          description\n          price\n        }\n        drinks {\n          id\n          name\n          description\n          price\n        }\n      }\n    }\n  `;\n  const { loading, error, data } = useQuery(GET_RESTAURANTS)\n  if (loading) return <p>Loading...</p>;\n  if (error) return <p>ERROR</p>;\n  if (!data) return <p>Not found</p>;\n  console.log(`Query Data: ${data.restaurants}`)\n\n\n  const searchQuery = data.restaurants.map((restaurant) => {\n    return {\n      ...restaurant,\n      dishes: restaurant.dishes.filter((dish) =>\n        dish.name.toLowerCase().includes(props.search)\n      ),\n      drinks: restaurant.drinks.filter((drink) =>\n        drink.name.toLowerCase().includes(props.search)\n      ),\n    };\n  });\n  \n  const handleRestaurantClick = (id) => {\n    const restaurant = searchQuery.find((res) => res.id === id);\n    if (restaurant) {\n      setRestaurantID(id);\n    } else {\n      setRestaurantID(0);\n    }\n  };\n  \n\n  const restId = searchQuery.length > 0 ? searchQuery[0].id : null;\n\n \n// definet renderer for Dishes\nconst renderDishes = () => {\n  if (restaurantID === 0) return null;\n  const restaurant = searchQuery.find((res) => res.id === restaurantID);\n  if (!restaurant) return null;\n  return <Dishes dishes={restaurant.dishes} />;\n};\n\nconst renderDrinks = () => {\n  if (restaurantID === 0) return null;\n  const restaurant = searchQuery.find((res) => res.id === restaurantID);\n  if (!restaurant) return null;\n  return <Drinks drinks={restaurant.drinks} />;\n};\n\n\nif(searchQuery.length > 0){\n  const restList = searchQuery.map((res) => (\n    <Col xs=\"6\" sm=\"4\" key={res.id}>\n      <Card style={{ margin: \"0 0.5rem 20px 0.5rem\" }}>\n        <CardImg\n          top={true}\n          style={{ height: 200 }}\n          src={\n          `http://localhost:1337`+ res.image.url\n          }\n        />\n        <CardBody>\n          <CardText>{res.description}</CardText>\n        </CardBody>\n        <div className=\"card-footer\">\n        \n        <Button color=\"info\" onClick={()=> setRestaurantID(res.id)}>{res.name}</Button>\n         \n        </div>\n      </Card>\n    </Col>\n  ))\n\n  return(\n\n    <Container>\n    <Row xs='3'>\n      {restList}\n    </Row>\n  \n    <Row xs='3'>\n    {renderDishes(restaurantID)}\n    </Row>\n    \n    <Row xs='3'>\n    {renderDrinks(restaurantID)}\n    </Row>\n \n    </Container>\n \n  )\n} else {\n  return <h1> No Restaurants Found</h1>\n}\n}\n   export default RestaurantList;"]},"metadata":{},"sourceType":"module"}