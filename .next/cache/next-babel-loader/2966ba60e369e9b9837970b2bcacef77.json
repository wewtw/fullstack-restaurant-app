{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\X\\\\Desktop\\\\MIT-Bootcamp-WebDev\\\\Week29\\\\setting-up-stripe_starter\\\\components\\\\restaurantList.js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { gql, useQuery } from '@apollo/client';\nimport Dishes from './dishes';\nimport Drinks from './drinks';\nimport AppContext from './context';\nimport { Button, Card, CardBody, CardImg, CardText, CardTitle, Container, Row, Col } from 'reactstrap';\nimport { useState, useContext, useEffect } from 'react';\n\nfunction RestaurantList(props) {\n  const {\n    0: searchQuery,\n    1: setSearchQuery\n  } = useState(props.search);\n  const {\n    0: restaurantID,\n    1: setRestaurantID\n  } = useState(0);\n  const {\n    cart\n  } = useContext(AppContext);\n  const {\n    0: state,\n    1: setState\n  } = useState(cart);\n  useEffect(() => {\n    setSearchQuery(props.search);\n  }, [props.search]);\n  const GET_RESTAURANTS = gql`\n    query {\n      restaurants {\n        id\n        name\n        description\n        image {\n          url\n        }\n      }\n    }\n  `;\n  const {\n    loading,\n    error,\n    data\n  } = useQuery(GET_RESTAURANTS);\n  if (loading) return __jsx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 23\n    }\n  }, \"Loading...\");\n  if (error) return __jsx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 21\n    }\n  }, \"ERROR\");\n  if (!data) return __jsx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 21\n    }\n  }, \"Not found\");\n  const searchResults = data.restaurants.filter(res => {\n    return res.name.toLowerCase().includes(searchQuery);\n  });\n  const restId = searchResults.length > 0 ? searchResults[0].id : 0; // define renderer for Dishes\n\n  const renderDishes = restaurantID => {\n    return __jsx(Dishes, {\n      restId: restaurantID,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 12\n      }\n    }, \" \");\n  };\n\n  const renderDrinks = restaurantID => {\n    return __jsx(Drinks, {\n      restId: restaurantID,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 12\n      }\n    }, \" \");\n  };\n\n  if (searchResults.length > 0) {\n    const restList = searchResults.map(res => __jsx(Col, {\n      xs: \"6\",\n      sm: \"4\",\n      key: res.id,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 7\n      }\n    }, __jsx(Card, {\n      style: {\n        margin: '0 0.5rem 20px 0.5rem'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 9\n      }\n    }, __jsx(CardImg, {\n      top: true,\n      style: {\n        height: 200\n      },\n      src: `http://localhost:1337` + res.image.url,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 11\n      }\n    }), __jsx(CardBody, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 11\n      }\n    }, __jsx(CardText, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 13\n      }\n    }, res.description)), __jsx(\"div\", {\n      className: \"card-footer\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 11\n      }\n    }, __jsx(Button, {\n      color: \"info\",\n      onClick: () => setRestaurantID(res.id),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 13\n      }\n    }, res.name)))));\n    return __jsx(Container, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 7\n      }\n    }, __jsx(Row, {\n      xs: \"3\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 9\n      }\n    }, restList), __jsx(Row, {\n      xs: \"3\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 9\n      }\n    }, renderDishes(restaurantID)), __jsx(Row, {\n      xs: \"3\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 9\n      }\n    }, renderDrinks(restaurantID)));\n  } else {\n    return __jsx(\"h1\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 10\n      }\n    }, \" No Restaurants Found\");\n  }\n}\n\nexport default RestaurantList;","map":{"version":3,"sources":["C:/Users/X/Desktop/MIT-Bootcamp-WebDev/Week29/setting-up-stripe_starter/components/restaurantList.js"],"names":["gql","useQuery","Dishes","Drinks","AppContext","Button","Card","CardBody","CardImg","CardText","CardTitle","Container","Row","Col","useState","useContext","useEffect","RestaurantList","props","searchQuery","setSearchQuery","search","restaurantID","setRestaurantID","cart","state","setState","GET_RESTAURANTS","loading","error","data","searchResults","restaurants","filter","res","name","toLowerCase","includes","restId","length","id","renderDishes","renderDrinks","restList","map","margin","height","image","url","description"],"mappings":"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","sourcesContent":["import { gql, useQuery } from '@apollo/client';\nimport Dishes from './dishes';\nimport Drinks from './drinks';\nimport AppContext from './context';\nimport { Button, Card, CardBody, CardImg, CardText, CardTitle, Container, Row, Col } from 'reactstrap';\nimport { useState, useContext, useEffect } from 'react';\n\nfunction RestaurantList(props) {\n  const [searchQuery, setSearchQuery] = useState(props.search);\n  const [restaurantID, setRestaurantID] = useState(0);\n  const { cart } = useContext(AppContext);\n  const [state, setState] = useState(cart);\n\n  useEffect(() => {\n    setSearchQuery(props.search);\n  }, [props.search]);\n\n  const GET_RESTAURANTS = gql`\n    query {\n      restaurants {\n        id\n        name\n        description\n        image {\n          url\n        }\n      }\n    }\n  `;\n  const { loading, error, data } = useQuery(GET_RESTAURANTS);\n\n  if (loading) return <p>Loading...</p>;\n  if (error) return <p>ERROR</p>;\n  if (!data) return <p>Not found</p>;\n\n  const searchResults = data.restaurants.filter((res) => {\n    return res.name.toLowerCase().includes(searchQuery);\n  });\n\n  const restId = searchResults.length > 0 ? searchResults[0].id : 0;\n\n  // define renderer for Dishes\n  const renderDishes = (restaurantID) => {\n    return <Dishes restId={restaurantID}> </Dishes>;\n  };\n  const renderDrinks = (restaurantID) => {\n    return <Drinks restId={restaurantID}> </Drinks>;\n  };\n\n  if (searchResults.length > 0) {\n    const restList = searchResults.map((res) => (\n      <Col xs='6' sm='4' key={res.id}>\n        <Card style={{ margin: '0 0.5rem 20px 0.5rem' }}>\n          <CardImg top={true} style={{ height: 200 }} src={`http://localhost:1337` + res.image.url} />\n          <CardBody>\n            <CardText>{res.description}</CardText>\n          </CardBody>\n          <div className='card-footer'>\n            <Button color='info' onClick={() => setRestaurantID(res.id)}>\n              {res.name}\n            </Button>\n          </div>\n        </Card>\n      </Col>\n    ));\n\n    return (\n      <Container>\n        <Row xs='3'>\n          {restList}\n          </Row>\n\n        <Row xs='3'>\n          {renderDishes(restaurantID)}\n          </Row>\n        <Row xs='3'>\n        {renderDrinks(restaurantID)}\n        </Row>\n \n    </Container>\n \n  )\n} else {\n  return <h1> No Restaurants Found</h1>\n}\n}\n   export default RestaurantList;"]},"metadata":{},"sourceType":"module"}