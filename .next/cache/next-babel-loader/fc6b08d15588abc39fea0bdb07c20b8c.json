{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport _taggedTemplateLiteral from \"@babel/runtime/helpers/esm/taggedTemplateLiteral\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\X\\\\Desktop\\\\MIT-Bootcamp-WebDev\\\\Week29\\\\setting-up-stripe_starter\\\\components\\\\restaurantList.js\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n    query {\\n      restaurants {\\n        id\\n        name\\n        description\\n        image {\\n          url\\n        }\\n        dishes {\\n          id\\n          name\\n          price\\n          image {\\n            url\\n          }\\n        }\\n        drinks {\\n          id\\n          name\\n          price\\n        }\\n      }\\n    }\\n  \"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport { gql, useQuery } from \"@apollo/client\";\nimport Dishes from \"./dishes\";\nimport { useContext, useState } from \"react\";\nimport AppContext from \"./context\";\nimport { Button, Card, CardBody, CardImg, CardText, CardTitle, Container, Row, Col } from \"reactstrap\";\n\nfunction RestaurantList(props) {\n  _s();\n\n  var _this = this;\n\n  var _useState = useState(0),\n      restaurantID = _useState[0],\n      setRestaurantID = _useState[1];\n\n  var _useContext = useContext(AppContext),\n      cart = _useContext.cart;\n\n  var _useState2 = useState(cart),\n      state = _useState2[0],\n      setState = _useState2[1];\n\n  var GET_RESTAURANTS = gql(_templateObject());\n\n  var _useQuery = useQuery(GET_RESTAURANTS),\n      loading = _useQuery.loading,\n      error = _useQuery.error,\n      data = _useQuery.data;\n\n  if (loading) return __jsx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 23\n    }\n  }, \"Loading...\");\n  if (error) return __jsx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 21\n    }\n  }, \"ERROR\");\n  if (!data) return __jsx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 21\n    }\n  }, \"Not found\");\n  console.log(\"Query Data: \".concat(data.restaurants));\n  var searchQuery = data.restaurants.filter(function (res) {\n    return res.name.toLowerCase().includes(props.search);\n  });\n  var restId;\n\n  if (searchQuery.length > 0) {\n    restId = searchQuery[0].id;\n  } // define renderer for Dishes and Drinks\n\n\n  var renderDishes = function renderDishes(restaurantID) {\n    var restaurant = data.restaurants.find(function (res) {\n      return res.id === restaurantID;\n    });\n    return __jsx(React.Fragment, null, restaurant.dishes && __jsx(Col, {\n      xs: \"6\",\n      sm: \"6\",\n      md: \"4\",\n      key: \"\".concat(restaurantID, \"-dishes\"),\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 11\n      }\n    }, __jsx(\"h3\", {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 13\n      }\n    }, \"Dishes\"), restaurant.dishes.map(function (dish) {\n      return __jsx(Card, {\n        key: dish.id,\n        style: {\n          marginBottom: \"1rem\"\n        },\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 15\n        }\n      }, __jsx(CardImg, {\n        top: true,\n        style: {\n          height: 200\n        },\n        src: \"http://localhost:1337\".concat(dish.image.url),\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 74,\n          columnNumber: 17\n        }\n      }), __jsx(CardBody, {\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 17\n        }\n      }, __jsx(CardTitle, {\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 19\n        }\n      }, dish.name), __jsx(CardText, {\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 81,\n          columnNumber: 19\n        }\n      }, \"$\", dish.price.toFixed(2)), __jsx(Button, {\n        color: \"success\",\n        onClick: function onClick() {\n          return setState([].concat(_toConsumableArray(state), [{\n            name: dish.name,\n            price: dish.price\n          }]));\n        },\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 19\n        }\n      }, \"Add to Cart\")));\n    })), restaurant.drinks && __jsx(Col, {\n      xs: \"6\",\n      sm: \"6\",\n      md: \"4\",\n      key: \"\".concat(restaurantID, \"-drinks\"),\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 11\n      }\n    }, __jsx(\"h3\", {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 13\n      }\n    }, \"Drinks\"), restaurant.drinks.map(function (drink) {\n      return __jsx(Card, {\n        key: drink.id,\n        style: {\n          marginBottom: \"1rem\"\n        },\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 99,\n          columnNumber: 15\n        }\n      }, __jsx(CardBody, {\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 100,\n          columnNumber: 17\n        }\n      }, __jsx(CardTitle, {\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 101,\n          columnNumber: 19\n        }\n      }, drink.name), __jsx(CardText, {\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 102,\n          columnNumber: 19\n        }\n      }, \"$\", drink.price.toFixed(2)), __jsx(Button, {\n        color: \"success\",\n        onClick: function onClick() {\n          return setState([].concat(_toConsumableArray(state), [{\n            name: drink.name,\n            price: drink.price\n          }]));\n        },\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 103,\n          columnNumber: 19\n        }\n      }, \"Add to Cart\")));\n    })));\n  };\n\n  if (searchQuery.length > 0) {\n    var _restId = searchQuery[0].id;\n    var restList = searchQuery.map(function (res) {\n      return __jsx(Col, {\n        xs: \"6\",\n        sm: \"4\",\n        key: res.id,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 124,\n          columnNumber: 7\n        }\n      }, __jsx(Card, {\n        style: {\n          margin: \"0 0.5rem 20px 0.5rem\"\n        },\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 125,\n          columnNumber: 7\n        }\n      }, __jsx(CardImg, {\n        top: true,\n        style: {\n          height: 200\n        },\n        src: \"http://localhost:1337\".concat(res.image.url),\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 126,\n          columnNumber: 7\n        }\n      }), __jsx(CardBody, {\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 131,\n          columnNumber: 7\n        }\n      }, __jsx(CardText, {\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 132,\n          columnNumber: 7\n        }\n      }, res.description)), __jsx(\"div\", {\n        className: \"card-footer\",\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 134,\n          columnNumber: 7\n        }\n      }, __jsx(Button, {\n        color: \"info\",\n        onClick: function onClick() {\n          return setRestaurantID(res.id);\n        },\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 135,\n          columnNumber: 7\n        }\n      }, res.name))));\n    });\n    return __jsx(Container, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 146,\n        columnNumber: 9\n      }\n    }, __jsx(Row, {\n      xs: \"3\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 147,\n        columnNumber: 11\n      }\n    }, restList), restaurantID !== 0 && __jsx(Row, {\n      xs: \"3\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 148,\n        columnNumber: 34\n      }\n    }, renderDishes(restaurantID)));\n  } else {\n    return __jsx(\"h1\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 153,\n        columnNumber: 14\n      }\n    }, \"No Restaurants Found\");\n  }\n}\n\n_s(RestaurantList, \"AG1Od7CGruCtgOneqAeKWk/inGw=\", false, function () {\n  return [useQuery];\n});\n\n_c = RestaurantList;\n;\nexport default RestaurantList;\n\nvar _c;\n\n$RefreshReg$(_c, \"RestaurantList\");","map":{"version":3,"sources":["C:/Users/X/Desktop/MIT-Bootcamp-WebDev/Week29/setting-up-stripe_starter/components/restaurantList.js"],"names":["gql","useQuery","Dishes","useContext","useState","AppContext","Button","Card","CardBody","CardImg","CardText","CardTitle","Container","Row","Col","RestaurantList","props","restaurantID","setRestaurantID","cart","state","setState","GET_RESTAURANTS","loading","error","data","console","log","restaurants","searchQuery","filter","res","name","toLowerCase","includes","search","restId","length","id","renderDishes","restaurant","find","dishes","map","dish","marginBottom","height","image","url","price","toFixed","drinks","drink","restList","margin","description"],"mappings":"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","sourcesContent":["import { gql, useQuery } from \"@apollo/client\";\nimport Dishes from \"./dishes\";\nimport { useContext, useState } from \"react\";\n\nimport AppContext from \"./context\";\nimport {\n  Button,\n  Card,\n  CardBody,\n  CardImg,\n  CardText,\n  CardTitle,\n  Container,\n  Row,\n  Col,\n} from \"reactstrap\";\n\nfunction RestaurantList(props) {\n  const [restaurantID, setRestaurantID] = useState(0);\n  const { cart } = useContext(AppContext);\n  const [state, setState] = useState(cart);\n  const GET_RESTAURANTS = gql`\n    query {\n      restaurants {\n        id\n        name\n        description\n        image {\n          url\n        }\n        dishes {\n          id\n          name\n          price\n          image {\n            url\n          }\n        }\n        drinks {\n          id\n          name\n          price\n        }\n      }\n    }\n  `;\n  const { loading, error, data } = useQuery(GET_RESTAURANTS);\n  if (loading) return <p>Loading...</p>;\n  if (error) return <p>ERROR</p>;\n  if (!data) return <p>Not found</p>;\n  console.log(`Query Data: ${data.restaurants}`);\n\n  let searchQuery = data.restaurants.filter((res) =>{\n    return res.name.toLowerCase().includes(props.search)\n})\n\nlet restId;\nif (searchQuery.length > 0) {\n  restId = searchQuery[0].id;\n}\n \n\n\n  // define renderer for Dishes and Drinks\n  const renderDishes = (restaurantID) => {\n    let restaurant = data.restaurants.find((res) => res.id === restaurantID);\n    return (\n      <>\n        {restaurant.dishes && (\n          <Col xs=\"6\" sm=\"6\" md=\"4\" key={`${restaurantID}-dishes`}>\n            <h3>Dishes</h3>\n            {restaurant.dishes.map((dish) => (\n              <Card key={dish.id} style={{ marginBottom: \"1rem\" }}>\n                <CardImg\n                  top={true}\n                  style={{ height: 200 }}\n                  src={`http://localhost:1337${dish.image.url}`}\n                />\n                <CardBody>\n                  <CardTitle>{dish.name}</CardTitle>\n                  <CardText>${dish.price.toFixed(2)}</CardText>\n                  <Button\n                    color=\"success\"\n                    onClick={() =>\n                      setState([...state, { name: dish.name, price: dish.price }])\n                    }\n                  >\n                    Add to Cart\n                  </Button>\n                </CardBody>\n              </Card>\n            ))}\n          </Col>\n        )}\n        {restaurant.drinks && (\n          <Col xs=\"6\" sm=\"6\" md=\"4\" key={`${restaurantID}-drinks`}>\n            <h3>Drinks</h3>\n            {restaurant.drinks.map((drink) => (\n              <Card key={drink.id} style={{ marginBottom: \"1rem\" }}>\n                <CardBody>\n                  <CardTitle>{drink.name}</CardTitle>\n                  <CardText>${drink.price.toFixed(2)}</CardText>\n                  <Button\n                    color=\"success\"\n                    onClick={() =>\n                      setState([...state, { name: drink.name, price: drink.price }])\n                    }\n                  >\n                    Add to Cart\n                  </Button>\n                </CardBody>\n              </Card>\n            ))}\n          </Col>\n        )}\n      </>\n    );\n  };\n\n  if (searchQuery.length > 0) {\n    const restId = searchQuery[0].id;\n    const restList = searchQuery.map((res) => (\n      \n      <Col xs=\"6\" sm=\"4\" key={res.id}>\n      <Card style={{ margin: \"0 0.5rem 20px 0.5rem\" }}>\n      <CardImg\n      top={true}\n      style={{ height: 200 }}\n      src={`http://localhost:1337${res.image.url}`}\n      />\n      <CardBody>\n      <CardText>{res.description}</CardText>\n      </CardBody>\n      <div className=\"card-footer\">\n      <Button\n      color=\"info\"\n      onClick={() => setRestaurantID(res.id)}\n      >\n      {res.name}\n      </Button>\n      </div>\n      </Card>\n      </Col>\n      ));\n      return (\n        <Container>\n          <Row xs=\"3\">{restList}</Row>\n          {restaurantID !== 0 && <Row xs=\"3\">{renderDishes(restaurantID)}</Row>}\n        </Container>\n      );\n      \n      } else {\n      return <h1>No Restaurants Found</h1>;\n      }\n      };\nexport default RestaurantList;\n"]},"metadata":{},"sourceType":"module"}