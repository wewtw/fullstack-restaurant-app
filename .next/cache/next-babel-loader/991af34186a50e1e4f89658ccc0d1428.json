{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _taggedTemplateLiteral from \"@babel/runtime/helpers/esm/taggedTemplateLiteral\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\X\\\\Desktop\\\\MIT-Bootcamp-WebDev\\\\Week29\\\\setting-up-stripe_starter\\\\components\\\\restaurantList.js\",\n    _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n    query {\\n      restaurants {\\n        id\\n        name\\n        description\\n        image {\\n          url\\n        }\\n        dishes {\\n          id\\n          name\\n          description\\n          price\\n        }\\n        drinks {\\n          id\\n          Name\\n          description\\n          price\\n        }\\n      }\\n    }\\n  \"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport React, { useState, useContext } from \"react\";\nimport { gql, useQuery } from \"@apollo/client\";\nimport Dishes from \"./dishes\";\nimport AppContext from \"./context\";\nimport { Button, Card, CardBody, CardImg, CardText, CardTitle, Container, Row, Col } from \"reactstrap\";\n\nfunction RestaurantList(props) {\n  _s();\n\n  var _this = this;\n\n  var _useState = useState(0),\n      restaurantID = _useState[0],\n      setRestaurantID = _useState[1];\n\n  var _useContext = useContext(AppContext),\n      cart = _useContext.cart;\n\n  var _useState2 = useState(cart),\n      state = _useState2[0],\n      setState = _useState2[1];\n\n  var GET_RESTAURANTS = gql(_templateObject());\n\n  var _useQuery = useQuery(GET_RESTAURANTS),\n      loading = _useQuery.loading,\n      error = _useQuery.error,\n      data = _useQuery.data;\n\n  if (loading) return __jsx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 23\n    }\n  }, \"Loading...\");\n  if (error) return __jsx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 21\n    }\n  }, \"ERROR\");\n  if (!data) return __jsx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 21\n    }\n  }, \"Not found\");\n  console.log(\"Query Data: \".concat(data.restaurants));\n  var searchQuery = data.restaurants.map(function (res) {\n    if (res.id === restaurantID) {\n      return _objectSpread(_objectSpread({}, res), {}, {\n        dishes: res.dishes.filter(function (dish) {\n          return dish.name.toLowerCase().includes(props.search);\n        })\n      });\n    } else {\n      return _objectSpread(_objectSpread({}, res), {}, {\n        dishes: res.dishes.filter(function (dish) {\n          return dish.name.toLowerCase().includes(props.search);\n        }),\n        showDishes: false\n      });\n    }\n  }).filter(function (res) {\n    return res.dishes.length > 0;\n  });\n  var restId = restaurantID;\n\n  var handleRestaurantClick = function handleRestaurantClick(res) {\n    if (res.id === restaurantID) {\n      setRestaurantID(0); // if already selected, deselect\n    } else {\n      setRestaurantID(res.id);\n    }\n  }; // define renderer for Dishes\n\n\n  var renderDishes = function renderDishes() {\n    if (restId === 0) return null;\n    var restaurant = data.restaurants.find(function (res) {\n      return res.id === restId;\n    });\n    if (!restaurant) return null;\n    return __jsx(React.Fragment, null, __jsx(Dishes, {\n      restId: restId,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 9\n      }\n    }), __jsx(\"h3\", {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 9\n      }\n    }, \"Drinks\"), __jsx(Row, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 9\n      }\n    }, restaurant.drinks.map(function (drink) {\n      return __jsx(Col, {\n        xs: \"6\",\n        sm: \"4\",\n        key: drink.id,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 91,\n          columnNumber: 13\n        }\n      }, __jsx(Card, {\n        style: {\n          margin: \"0 0.5rem 20px 0.5rem\"\n        },\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 92,\n          columnNumber: 15\n        }\n      }, __jsx(CardImg, {\n        top: true,\n        style: {\n          height: 200\n        },\n        src: \"http://localhost:1337\" + drink.image.url,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 93,\n          columnNumber: 17\n        }\n      }), __jsx(CardBody, {\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 98,\n          columnNumber: 17\n        }\n      }, __jsx(CardTitle, {\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 99,\n          columnNumber: 19\n        }\n      }, drink.Name), __jsx(CardText, {\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 100,\n          columnNumber: 19\n        }\n      }, drink.description), __jsx(CardText, {\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 101,\n          columnNumber: 19\n        }\n      }, \"$\", drink.price / 100), __jsx(Button, {\n        onClick: function onClick() {\n          return setState(function (prev) {\n            var itemIndex = prev.findIndex(function (item) {\n              return item.id === drink.id && item.type === \"drink\";\n            });\n\n            if (itemIndex >= 0) {\n              var newState = _toConsumableArray(prev);\n\n              newState[itemIndex].quantity++;\n              return newState;\n            } else {\n              return [].concat(_toConsumableArray(prev), [{\n                id: drink.id,\n                name: drink.Name,\n                price: drink.price,\n                quantity: 1,\n                type: \"drink\"\n              }]);\n            }\n          });\n        },\n        color: \"primary\",\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 102,\n          columnNumber: 19\n        }\n      }, \"Add to Cart\"))));\n    })));\n  };\n\n  var restList = searchQuery.map(function (res) {\n    return __jsx(Col, {\n      xs: \"6\",\n      sm: \"4\",\n      key: res.id,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 135,\n        columnNumber: 5\n      }\n    }, __jsx(Card, {\n      style: {\n        margin: \"0 0.5rem 20px 0.5rem\"\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 136,\n        columnNumber: 7\n      }\n    }, __jsx(CardImg, {\n      top: true,\n      style: {\n        height: 200\n      },\n      src: \"http://localhost:1337\" + res.image.url,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 137,\n        columnNumber: 9\n      }\n    }), __jsx(CardBody, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 142,\n        columnNumber: 9\n      }\n    }, __jsx(CardText, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 143,\n        columnNumber: 11\n      }\n    }, res.description)), __jsx(\"div\", {\n      className: \"card-footer\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 145,\n        columnNumber: 9\n      }\n    }, __jsx(Button, {\n      color: res.id === restaurantID ? \"secondary\" : \"info\",\n      onClick: function onClick() {\n        return handleRestaurantClick(res);\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 146,\n        columnNumber: 11\n      }\n    }, res.name))));\n  });\n  return __jsx(Container, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 158,\n      columnNumber: 5\n    }\n  }, __jsx(Row, {\n    xs: \"3\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 159,\n      columnNumber: 7\n    }\n  }, restList), __jsx(Row, {\n    xs: \"3\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 160,\n      columnNumber: 7\n    }\n  }, renderDishes()));\n}\n\n_s(RestaurantList, \"AG1Od7CGruCtgOneqAeKWk/inGw=\", false, function () {\n  return [useQuery];\n});\n\n_c = RestaurantList;\nexport default RestaurantList;\n\nvar _c;\n\n$RefreshReg$(_c, \"RestaurantList\");","map":{"version":3,"sources":["C:/Users/X/Desktop/MIT-Bootcamp-WebDev/Week29/setting-up-stripe_starter/components/restaurantList.js"],"names":["React","useState","useContext","gql","useQuery","Dishes","AppContext","Button","Card","CardBody","CardImg","CardText","CardTitle","Container","Row","Col","RestaurantList","props","restaurantID","setRestaurantID","cart","state","setState","GET_RESTAURANTS","loading","error","data","console","log","restaurants","searchQuery","map","res","id","dishes","filter","dish","name","toLowerCase","includes","search","showDishes","length","restId","handleRestaurantClick","renderDishes","restaurant","find","drinks","drink","margin","height","image","url","Name","description","price","prev","itemIndex","findIndex","item","type","newState","quantity","restList"],"mappings":"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","sourcesContent":["import React, { useState, useContext } from \"react\";\nimport { gql, useQuery } from \"@apollo/client\";\nimport Dishes from \"./dishes\";\nimport AppContext from \"./context\";\nimport {\n  Button,\n  Card,\n  CardBody,\n  CardImg,\n  CardText,\n  CardTitle,\n  Container,\n  Row,\n  Col,\n} from \"reactstrap\";\n\nfunction RestaurantList(props) {\n  const [restaurantID, setRestaurantID] = useState(0);\n  const { cart } = useContext(AppContext);\n  const [state, setState] = useState(cart);\n  const GET_RESTAURANTS = gql`\n    query {\n      restaurants {\n        id\n        name\n        description\n        image {\n          url\n        }\n        dishes {\n          id\n          name\n          description\n          price\n        }\n        drinks {\n          id\n          Name\n          description\n          price\n        }\n      }\n    }\n  `;\n  const { loading, error, data } = useQuery(GET_RESTAURANTS);\n  if (loading) return <p>Loading...</p>;\n  if (error) return <p>ERROR</p>;\n  if (!data) return <p>Not found</p>;\n  console.log(`Query Data: ${data.restaurants}`);\n\n  let searchQuery = data.restaurants.map((res) => {\n    if (res.id === restaurantID) {\n      return {\n        ...res,\n        dishes: res.dishes.filter((dish) =>\n          dish.name.toLowerCase().includes(props.search)\n        ),\n      };\n    } else {\n      return {\n        ...res,\n        dishes: res.dishes.filter((dish) =>\n          dish.name.toLowerCase().includes(props.search)\n        ),\n        showDishes: false\n      };\n    }\n  }).filter(res => res.dishes.length > 0);\n\n  const restId = restaurantID;\n\n  const handleRestaurantClick = (res) => {\n    if (res.id === restaurantID) {\n      setRestaurantID(0); // if already selected, deselect\n    } else {\n      setRestaurantID(res.id);\n    }\n  };\n\n  // define renderer for Dishes\n  const renderDishes = () => {\n    if (restId === 0) return null;\n    const restaurant = data.restaurants.find((res) => res.id === restId);\n    if (!restaurant) return null;\n    return (\n      <>\n        <Dishes restId={restId} />\n        <h3>Drinks</h3>\n        <Row>\n          {restaurant.drinks.map((drink) => (\n            <Col xs=\"6\" sm=\"4\" key={drink.id}>\n              <Card style={{ margin: \"0 0.5rem 20px 0.5rem\" }}>\n                <CardImg\n                  top={true}\n                  style={{ height: 200 }}\n                  src={`http://localhost:1337` + drink.image.url}\n                />\n                <CardBody>\n                  <CardTitle>{drink.Name}</CardTitle>\n                  <CardText>{drink.description}</CardText>\n                  <CardText>${drink.price / 100}</CardText>\n                  <Button\n                    onClick={() =>\n                      setState((prev) => {\n                        const itemIndex = prev.findIndex(\n                          (item) => item.id === drink.id && item.type === \"drink\"\n                        );\n                        if (itemIndex >= 0) {\n                          const newState = [...prev];\n                          newState[itemIndex].quantity++;\n                          return newState;\n                        } else {\n                          return [\n                            ...prev,\n                            { id: drink.id, name: drink.Name, price: drink.price, quantity: 1, type: \"drink\" },\n                          ];\n                        }\n                      })\n                    }\n                    color=\"primary\"\n                  >\n                    Add to Cart\n                  </Button>\n                </CardBody>\n              </Card>\n            </Col>\n          ))}\n        </Row>\n      </>\n    );\n  };\n  \n\n  const restList = searchQuery.map((res) => (\n    <Col xs=\"6\" sm=\"4\" key={res.id}>\n      <Card style={{ margin: \"0 0.5rem 20px 0.5rem\" }}>\n        <CardImg\n          top={true}\n          style={{ height: 200 }}\n          src={`http://localhost:1337` + res.image.url}\n        />\n        <CardBody>\n          <CardText>{res.description}</CardText>\n        </CardBody>\n        <div className=\"card-footer\">\n          <Button\n            color={res.id === restaurantID ? \"secondary\" : \"info\"}\n            onClick={() => handleRestaurantClick(res)}\n          >\n            {res.name}\n          </Button>\n        </div>\n      </Card>\n    </Col>\n  ));\n\n  return (\n    <Container>\n      <Row xs=\"3\">{restList}</Row>\n      <Row xs=\"3\">{renderDishes()}</Row>\n    </Container>\n  );\n}\n\nexport default RestaurantList;\n"]},"metadata":{},"sourceType":"module"}