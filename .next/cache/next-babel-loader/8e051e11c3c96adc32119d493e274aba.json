{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\X\\\\Desktop\\\\MIT-Bootcamp-WebDev\\\\Week29\\\\setting-up-stripe_starter\\\\components\\\\restaurantList.js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { gql, useQuery } from \"@apollo/client\";\nimport Dishes from \"./dishes\";\nimport { useContext, useState, useEffect } from \"react\";\nimport AppContext from \"./context\";\nimport { Button, Card, CardBody, CardImg, CardText, CardTitle, Container, Row, Col } from \"reactstrap\";\n\nfunction RestaurantList(props) {\n  const {\n    cart\n  } = useContext(AppContext);\n  const {\n    0: state,\n    1: setState\n  } = useState(cart);\n  const {\n    0: restaurantID,\n    1: setRestaurantID\n  } = useState(0); // initial state is 0\n\n  const {\n    0: searchQuery,\n    1: setSearchQuery\n  } = useState([]);\n  const GET_RESTAURANTS = gql`\n    query {\n      restaurants {\n        id\n        name\n        description\n        image {\n          url\n        }\n      }\n    }\n  `;\n  const {\n    loading,\n    error,\n    data\n  } = useQuery(GET_RESTAURANTS);\n  useEffect(() => {\n    if (data) {\n      // Filter restaurants based on search query\n      const filteredRestaurants = data.restaurants.filter(res => res.name.toLowerCase().includes(props.search)); // If the selected restaurant is not found in the filtered results,\n      // reset the selected restaurant to 0\n\n      if (!filteredRestaurants.find(res => res.id === restaurantID)) {\n        setRestaurantID(0);\n      }\n\n      setSearchQuery(filteredRestaurants);\n    }\n  }, [props.search, data, restaurantID]);\n  if (loading) return __jsx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 23\n    }\n  }, \"Loading...\");\n  if (error) return __jsx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 21\n    }\n  }, \"ERROR\");\n  if (!data) return __jsx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 21\n    }\n  }, \"Not found\");\n\n  const selectRestaurant = id => {\n    setRestaurantID(id);\n  };\n\n  const renderDishes = () => {\n    if (restaurantID !== 0) {\n      return __jsx(Dishes, {\n        restId: restaurantID,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 14\n        }\n      });\n    }\n  };\n\n  const restList = searchQuery.map(res => __jsx(Col, {\n    xs: \"6\",\n    sm: \"4\",\n    key: res.id,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 5\n    }\n  }, __jsx(Card, {\n    style: {\n      margin: \"0 0.5rem 20px 0.5rem\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 7\n    }\n  }, __jsx(CardImg, {\n    top: true,\n    style: {\n      height: 200\n    },\n    src: `http://localhost:1337` + res.image.url,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 9\n    }\n  }), __jsx(CardBody, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 9\n    }\n  }, __jsx(CardText, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 11\n    }\n  }, res.description)), __jsx(\"div\", {\n    className: \"card-footer\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 9\n    }\n  }, __jsx(Button, {\n    color: \"info\",\n    onClick: () => selectRestaurant(res.id),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 11\n    }\n  }, res.name)))));\n  return __jsx(Container, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 5\n    }\n  }, __jsx(Row, {\n    xs: \"3\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 7\n    }\n  }, restList), __jsx(Row, {\n    xs: \"3\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 7\n    }\n  }, renderDishes()));\n}\n\nexport default RestaurantList;","map":{"version":3,"sources":["C:/Users/X/Desktop/MIT-Bootcamp-WebDev/Week29/setting-up-stripe_starter/components/restaurantList.js"],"names":["gql","useQuery","Dishes","useContext","useState","useEffect","AppContext","Button","Card","CardBody","CardImg","CardText","CardTitle","Container","Row","Col","RestaurantList","props","cart","state","setState","restaurantID","setRestaurantID","searchQuery","setSearchQuery","GET_RESTAURANTS","loading","error","data","filteredRestaurants","restaurants","filter","res","name","toLowerCase","includes","search","find","id","selectRestaurant","renderDishes","restList","map","margin","height","image","url","description"],"mappings":"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","sourcesContent":["import { gql, useQuery } from \"@apollo/client\";\nimport Dishes from \"./dishes\";\nimport { useContext, useState, useEffect } from \"react\";\n\nimport AppContext from \"./context\";\nimport {\n  Button,\n  Card,\n  CardBody,\n  CardImg,\n  CardText,\n  CardTitle,\n  Container,\n  Row,\n  Col,\n} from \"reactstrap\";\n\nfunction RestaurantList(props) {\n  const { cart } = useContext(AppContext);\n  const [state, setState] = useState(cart);\n  const [restaurantID, setRestaurantID] = useState(0); // initial state is 0\n  const [searchQuery, setSearchQuery] = useState([]);\n\n  const GET_RESTAURANTS = gql`\n    query {\n      restaurants {\n        id\n        name\n        description\n        image {\n          url\n        }\n      }\n    }\n  `;\n  const { loading, error, data } = useQuery(GET_RESTAURANTS);\n\n  useEffect(() => {\n    if (data) {\n      // Filter restaurants based on search query\n      const filteredRestaurants = data.restaurants.filter((res) =>\n        res.name.toLowerCase().includes(props.search)\n      );\n\n      // If the selected restaurant is not found in the filtered results,\n      // reset the selected restaurant to 0\n      if (!filteredRestaurants.find((res) => res.id === restaurantID)) {\n        setRestaurantID(0);\n      }\n\n      setSearchQuery(filteredRestaurants);\n    }\n  }, [props.search, data, restaurantID]);\n\n  if (loading) return <p>Loading...</p>;\n  if (error) return <p>ERROR</p>;\n  if (!data) return <p>Not found</p>;\n\n  const selectRestaurant = (id) => {\n    setRestaurantID(id);\n  };\n\n  const renderDishes = () => {\n    if (restaurantID !== 0) {\n      return <Dishes restId={restaurantID}></Dishes>;\n    }\n  };\n\n  const restList = searchQuery.map((res) => (\n    <Col xs=\"6\" sm=\"4\" key={res.id}>\n      <Card style={{ margin: \"0 0.5rem 20px 0.5rem\" }}>\n        <CardImg\n          top={true}\n          style={{ height: 200 }}\n          src={`http://localhost:1337` + res.image.url}\n        />\n        <CardBody>\n          <CardText>{res.description}</CardText>\n        </CardBody>\n        <div className=\"card-footer\">\n          <Button color=\"info\" onClick={() => selectRestaurant(res.id)}>\n            {res.name}\n          </Button>\n        </div>\n      </Card>\n    </Col>\n  ));\n\n  return (\n    <Container>\n      <Row xs=\"3\">{restList}</Row>\n      <Row xs=\"3\">{renderDishes()}</Row>\n    </Container>\n  );\n}\n\nexport default RestaurantList;\n"]},"metadata":{},"sourceType":"module"}