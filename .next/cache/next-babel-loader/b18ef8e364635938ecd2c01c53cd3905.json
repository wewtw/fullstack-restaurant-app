{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { useState, useContext } from \"react\";\nimport { gql, useQuery } from \"@apollo/client\";\nimport Dishes from \"./dishes\";\nimport Drinks from \"./drinks\";\nimport AppContext from \"./context\";\nimport { Button, Card, CardBody, CardImg, CardText, CardTitle, Col, Container, Row } from 'reactstrap';\n\nfunction RestaurantList(props) {\n  const {\n    cart\n  } = useContext(AppContext);\n  const {\n    0: state,\n    1: setState\n  } = useState(cart); ////gql get added dishes and drinks.\n\n  const GET_RESTAURANTS = gql`\n    query {\n      restaurants {\n        id\n        name\n        description\n        image {\n          url\n        }\n        dishes {\n          id\n          name\n          description\n          price\n        }\n        drinks {\n          id\n          price\n          name\n          description\n          \n        }\n      }\n    }\n  `;\n  const {\n    loading,\n    error,\n    data\n  } = useQuery(GET_RESTAURANTS);\n  const {\n    0: selectedRestaurant,\n    1: setSelectedRestaurant\n  } = useState(null);\n  if (loading) return __jsx(\"p\", null, \"Loading...\");\n\n  if (error) {\n    console.log(error);\n    return __jsx(\"p\", null, \"ERROR\");\n  }\n\n  if (!data) return __jsx(\"p\", null, \"Not found\");\n  console.log(`Query Data: ${data.restaurants}`); ////menu click\n\n  const handleRestaurantClick = restaurant => {\n    if (selectedRestaurant && selectedRestaurant.id === restaurant.id) {\n      setSelectedRestaurant(null);\n    } else {\n      setSelectedRestaurant(restaurant);\n    }\n  }; /////rendering items.\n\n\n  const renderDishes = () => {\n    if (!selectedRestaurant) return null;\n    return __jsx(Dishes, {\n      restId: selectedRestaurant.id,\n      searchQuery: props.search\n    });\n  };\n\n  const renderDrinks = () => {\n    if (!selectedRestaurant) return null;\n    return __jsx(Drinks, {\n      restId: selectedRestaurant.id,\n      searchQuery: props.search\n    });\n  }; ////searching and filtering.  \n\n\n  const searchQuery = data.restaurants.filter(restaurant => {\n    const matchedDishes = restaurant.dishes.filter(dish => dish.name.toLowerCase().includes(props.search));\n    const matchedDrinks = restaurant.drinks.filter(drink => drink.name.toLowerCase().includes(props.search));\n    const matchedRestaurant = restaurant.name.toLowerCase().includes(props.search);\n    return matchedDishes.length > 0 || matchedDrinks.length > 0 || matchedRestaurant;\n  }).map(restaurant => _objectSpread(_objectSpread({}, restaurant), {}, {\n    dishes: restaurant.dishes.filter(dish => dish.name.toLowerCase().includes(props.search)),\n    drinks: restaurant.drinks.filter(drink => drink.name.toLowerCase().includes(props.search))\n  })); ///list rendering. \n\n  const restList = searchQuery.map(restaurant => __jsx(Col, {\n    xs: \"6\",\n    sm: \"4\",\n    key: restaurant.id\n  }, __jsx(Card, {\n    style: {\n      margin: \"10px 10px\",\n      color: 'Black',\n      background: \"white\",\n      marginBottom: \"2rem\"\n    }\n  }, __jsx(CardImg, {\n    top: true,\n    style: {\n      height: 200\n    },\n    src: `http://localhost:1337` + restaurant.image.url\n  }), __jsx(CardBody, null, __jsx(CardTitle, null, restaurant.name), __jsx(CardText, null, restaurant.description)), __jsx(\"div\", {\n    className: \"card-footer\"\n  }, __jsx(Button, {\n    color: selectedRestaurant && selectedRestaurant.id === restaurant.id ? \"secondary\" : \"info\",\n    onClick: () => handleRestaurantClick(restaurant)\n  }, selectedRestaurant && selectedRestaurant.id === restaurant.id ? \"Close\" : \"View Menu\")))));\n  return __jsx(Container, null, __jsx(Row, {\n    xs: \"3\"\n  }, restList), __jsx(Row, {\n    xs: \"3\"\n  }, renderDishes()), __jsx(Row, {\n    xs: \"3\"\n  }, renderDrinks()));\n}\n\nexport default RestaurantList;","map":null,"metadata":{},"sourceType":"module"}