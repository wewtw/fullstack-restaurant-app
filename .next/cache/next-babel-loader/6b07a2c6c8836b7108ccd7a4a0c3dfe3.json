{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\X\\\\Desktop\\\\MIT-Bootcamp-WebDev\\\\Week29\\\\setting-up-stripe_starter\\\\components\\\\restaurantList.js\";\nvar __jsx = React.createElement;\nimport React, { useState, useContext } from \"react\";\nimport { gql, useQuery } from \"@apollo/client\";\nimport Dishes from \"./dishes\";\nimport AppContext from \"./context\";\nimport { Button, Card, CardBody, CardImg, CardText, CardTitle, Container, Row, Col } from \"reactstrap\";\n\nfunction RestaurantList(props) {\n  const {\n    0: restaurantID,\n    1: setRestaurantID\n  } = useState(0);\n  const {\n    cart\n  } = useContext(AppContext);\n  const {\n    0: state,\n    1: setState\n  } = useState(cart);\n  const GET_RESTAURANTS = gql`\n    query {\n      restaurants {\n        id\n        name\n        description\n        image {\n          url\n        }\n        dishes {\n          id\n          name\n          description\n          price\n        }\n      }\n    }\n  `;\n  const {\n    loading,\n    error,\n    data\n  } = useQuery(GET_RESTAURANTS);\n  if (loading) return __jsx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 23\n    }\n  }, \"Loading...\");\n  if (error) return __jsx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 21\n    }\n  }, \"ERROR\");\n  if (!data) return __jsx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 21\n    }\n  }, \"Not found\");\n  console.log(`Query Data: ${data.restaurants}`);\n  const searchQuery = data.restaurants.filter(res => {\n    return res.name.toLowerCase().includes(props.search) || res.dishes.some(dish => dish.name.toLowerCase().includes(props.search));\n  });\n  const restId = restaurantID;\n\n  const handleRestaurantClick = res => {\n    if (res.id === restaurantID) {\n      setRestaurantID(0); // if already selected, deselect\n    } else {\n      setRestaurantID(res.id);\n    }\n  }; // define renderer for Dishes\n\n\n  const renderDishes = () => {\n    if (restId === 0) return null;\n    const restaurant = data.restaurants.find(res => res.id === restId);\n    if (!restaurant) return null;\n    return __jsx(Dishes, {\n      restId: restId,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 12\n      }\n    });\n  };\n\n  const restList = searchQuery.map(res => __jsx(Col, {\n    xs: \"6\",\n    sm: \"4\",\n    key: res.id,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 5\n    }\n  }, __jsx(Card, {\n    style: {\n      margin: \"0 0.5rem 20px 0.5rem\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 7\n    }\n  }, __jsx(CardImg, {\n    top: true,\n    style: {\n      height: 200\n    },\n    src: `http://localhost:1337` + res.image.url,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 9\n    }\n  }), __jsx(CardBody, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 9\n    }\n  }, __jsx(CardText, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 11\n    }\n  }, res.description)), __jsx(\"div\", {\n    className: \"card-footer\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 9\n    }\n  }, __jsx(Button, {\n    color: res.id === restaurantID ? \"secondary\" : \"info\",\n    onClick: () => handleRestaurantClick(res),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 11\n    }\n  }, res.name)))));\n  return __jsx(Container, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 5\n    }\n  }, __jsx(Row, {\n    xs: \"3\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 7\n    }\n  }, restList), __jsx(Row, {\n    xs: \"3\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 7\n    }\n  }, renderDishes()));\n}\n\nexport default RestaurantList;","map":{"version":3,"sources":["C:/Users/X/Desktop/MIT-Bootcamp-WebDev/Week29/setting-up-stripe_starter/components/restaurantList.js"],"names":["React","useState","useContext","gql","useQuery","Dishes","AppContext","Button","Card","CardBody","CardImg","CardText","CardTitle","Container","Row","Col","RestaurantList","props","restaurantID","setRestaurantID","cart","state","setState","GET_RESTAURANTS","loading","error","data","console","log","restaurants","searchQuery","filter","res","name","toLowerCase","includes","search","dishes","some","dish","restId","handleRestaurantClick","id","renderDishes","restaurant","find","restList","map","margin","height","image","url","description"],"mappings":"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","sourcesContent":["import React, { useState, useContext } from \"react\";\nimport { gql, useQuery } from \"@apollo/client\";\nimport Dishes from \"./dishes\";\nimport AppContext from \"./context\";\nimport {\n  Button,\n  Card,\n  CardBody,\n  CardImg,\n  CardText,\n  CardTitle,\n  Container,\n  Row,\n  Col,\n} from \"reactstrap\";\n\nfunction RestaurantList(props) {\n  const [restaurantID, setRestaurantID] = useState(0);\n  const { cart } = useContext(AppContext);\n  const [state, setState] = useState(cart);\n  const GET_RESTAURANTS = gql`\n    query {\n      restaurants {\n        id\n        name\n        description\n        image {\n          url\n        }\n        dishes {\n          id\n          name\n          description\n          price\n        }\n      }\n    }\n  `;\n  const { loading, error, data } = useQuery(GET_RESTAURANTS);\n  if (loading) return <p>Loading...</p>;\n  if (error) return <p>ERROR</p>;\n  if (!data) return <p>Not found</p>;\n  console.log(`Query Data: ${data.restaurants}`);\n\n  const searchQuery = data.restaurants.filter((res) => {\n    return (\n      res.name.toLowerCase().includes(props.search) ||\n      res.dishes.some((dish) => dish.name.toLowerCase().includes(props.search))\n    );\n  });\n\n  const restId = restaurantID;\n\n  const handleRestaurantClick = (res) => {\n    if (res.id === restaurantID) {\n      setRestaurantID(0); // if already selected, deselect\n    } else {\n      setRestaurantID(res.id);\n    }\n  };\n\n  // define renderer for Dishes\n  const renderDishes = () => {\n    if (restId === 0) return null;\n    const restaurant = data.restaurants.find((res) => res.id === restId);\n    if (!restaurant) return null;\n    return <Dishes restId={restId} />;\n  };\n\n  const restList = searchQuery.map((res) => (\n    <Col xs=\"6\" sm=\"4\" key={res.id}>\n      <Card style={{ margin: \"0 0.5rem 20px 0.5rem\" }}>\n        <CardImg\n          top={true}\n          style={{ height: 200 }}\n          src={`http://localhost:1337` + res.image.url}\n        />\n        <CardBody>\n          <CardText>{res.description}</CardText>\n        </CardBody>\n        <div className=\"card-footer\">\n          <Button\n            color={res.id === restaurantID ? \"secondary\" : \"info\"}\n            onClick={() => handleRestaurantClick(res)}\n          >\n            {res.name}\n          </Button>\n        </div>\n      </Card>\n    </Col>\n  ));\n\n  return (\n    <Container>\n      <Row xs=\"3\">{restList}</Row>\n      <Row xs=\"3\">{renderDishes()}</Row>\n    </Container>\n  );\n}\n\nexport default RestaurantList;\n"]},"metadata":{},"sourceType":"module"}