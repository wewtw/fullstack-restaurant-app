{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\X\\\\Desktop\\\\MIT-Bootcamp-WebDev\\\\Week29\\\\setting-up-stripe_starter\\\\components\\\\restaurantList.js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { gql, useQuery } from '@apollo/client';\nimport Dishes from \"./dishes\";\nimport { useContext, useState } from 'react';\nimport Drinks from \"./drinks\";\nimport AppContext from \"./context\";\nimport { Button, Card, CardBody, CardImg, CardText, CardTitle, Container, Row, Col } from \"reactstrap\";\n\nfunction RestaurantList(props) {\n  const {\n    0: restaurantID,\n    1: setRestaurantID\n  } = useState(0);\n  const {\n    cart\n  } = useContext(AppContext);\n  const {\n    0: state,\n    1: setState\n  } = useState(cart);\n  const GET_RESTAURANTS = gql`\n    query {\n      restaurants {\n        id\n        name\n        description\n        image {\n          url\n        }\n      }\n    }\n  `;\n  const {\n    loading,\n    error,\n    data\n  } = useQuery(GET_RESTAURANTS);\n  if (loading) return __jsx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 23\n    }\n  }, \"Loading...\");\n  if (error) return __jsx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 21\n    }\n  }, \"ERROR\");\n  if (!data) return __jsx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 21\n    }\n  }, \"Not found\");\n  let searchQuery = data.restaurants.filter(res => {\n    return res.name.toLowerCase().includes(props.search);\n  });\n  let restId = searchQuery.length > 0 && searchQuery[0].id > 0 ? searchQuery[0].id : null;\n  const GET_DISHES = gql`\n    query GetDishes($id: ID!) {\n      restaurant(id: $id) {\n        dishes {\n          id\n          name\n          price\n          description\n          image {\n            url\n          }\n        }\n      }\n    }\n  `;\n  const {\n    loading: loadingDishes,\n    error: errorDishes,\n    data: dataDishes\n  } = useQuery(GET_DISHES, {\n    variables: {\n      id: restaurantID\n    }\n  });\n  const GET_DRINKS = gql`\n    query GetDrinks($id: ID!) {\n      restaurant(id: $id) {\n        drinks {\n          id\n          name\n          price\n          description\n        }\n      }\n    }\n  `;\n  const {\n    loading: loadingDrinks,\n    error: errorDrinks,\n    data: dataDrinks\n  } = useQuery(GET_DRINKS, {\n    variables: {\n      id: restaurantID\n    }\n  }); // Define renderer for Dishes\n\n  const renderDishes = () => {\n    if (loadingDishes) return __jsx(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 31\n      }\n    }, \"Loading...\");\n    if (errorDishes) return __jsx(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 29\n      }\n    }, \"Error\");\n    if (!dataDishes) return __jsx(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 29\n      }\n    }, \"Not found\");\n    return __jsx(Dishes, {\n      dishes: dataDishes.restaurant.dishes,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 13\n      }\n    });\n  }; // Define renderer for Drinks\n\n\n  const renderDrinks = () => {\n    if (loadingDrinks) return __jsx(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 31\n      }\n    }, \"Loading...\");\n    if (errorDrinks) return __jsx(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 29\n      }\n    }, \"Error\");\n    if (!dataDrinks) return __jsx(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 29\n      }\n    }, \"Not found\");\n    return __jsx(Drinks, {\n      drinks: dataDrinks.restaurant.drinks,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 13\n      }\n    });\n  };\n\n  if (searchQuery.length > 0) {\n    const restList = searchQuery.map(res => __jsx(Col, {\n      xs: \"6\",\n      sm: \"4\",\n      key: res.id,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 7\n      }\n    }, __jsx(Card, {\n      style: {\n        margin: \"0 0.5rem 20px 0.5rem\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 9\n      }\n    }, __jsx(CardImg, {\n      top: true,\n      style: {\n        height: 200\n      },\n      src: `http://localhost:1337` + res.image.url,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 11\n      }\n    }), __jsx(CardBody, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 11\n      }\n    }, __jsx(CardText, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 13\n      }\n    }, res.description)), __jsx(\"div\", {\n      className: \"card-footer\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 11\n      }\n    }, __jsx(Button, {\n      color: \"info\",\n      onClick: () => setRestaurantID(res.id),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 11\n      }\n    }, res.name)))));\n    return __jsx(Container, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 7\n      }\n    }, __jsx(Row, {\n      xs: \"3\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 9\n      }\n    }, restList), __jsx(Row, {\n      xs: \"3\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 9\n      }\n    }, renderDishes(restaurantID)), __jsx(Row, {\n      xs: \"3\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 9\n      }\n    }, renderDrinks(restaurantID)));\n  } else {\n    return __jsx(\"h1\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 133,\n        columnNumber: 12\n      }\n    }, \" No Restaurants Found\");\n  }\n}\n\nexport default RestaurantList;","map":{"version":3,"sources":["C:/Users/X/Desktop/MIT-Bootcamp-WebDev/Week29/setting-up-stripe_starter/components/restaurantList.js"],"names":["gql","useQuery","Dishes","useContext","useState","Drinks","AppContext","Button","Card","CardBody","CardImg","CardText","CardTitle","Container","Row","Col","RestaurantList","props","restaurantID","setRestaurantID","cart","state","setState","GET_RESTAURANTS","loading","error","data","searchQuery","restaurants","filter","res","name","toLowerCase","includes","search","restId","length","id","GET_DISHES","loadingDishes","errorDishes","dataDishes","variables","GET_DRINKS","loadingDrinks","errorDrinks","dataDrinks","renderDishes","restaurant","dishes","renderDrinks","drinks","restList","map","margin","height","image","url","description"],"mappings":"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","sourcesContent":["import { gql, useQuery } from '@apollo/client';\nimport Dishes from \"./dishes\"\nimport { useContext, useState } from 'react';\nimport Drinks from \"./drinks\";\n\nimport AppContext from \"./context\"\nimport {\n  Button,\n  Card,\n  CardBody,\n  CardImg,\n  CardText,\n  CardTitle,\n  Container,\n  Row,\n  Col\n} from \"reactstrap\";\n\nfunction RestaurantList(props){\n  const [restaurantID, setRestaurantID] = useState(0)\n  const { cart } = useContext(AppContext);\n  const [state, setState] = useState(cart)\n  const GET_RESTAURANTS = gql`\n    query {\n      restaurants {\n        id\n        name\n        description\n        image {\n          url\n        }\n      }\n    }\n  `;\n  const { loading, error, data } = useQuery(GET_RESTAURANTS)\n  if (loading) return <p>Loading...</p>;\n  if (error) return <p>ERROR</p>;\n  if (!data) return <p>Not found</p>;\n\n  let searchQuery = data.restaurants.filter((res) =>{\n    return res.name.toLowerCase().includes(props.search)\n  })\n\n  let restId = searchQuery.length > 0 && searchQuery[0].id > 0 ? searchQuery[0].id : null;\n\n  const GET_DISHES = gql`\n    query GetDishes($id: ID!) {\n      restaurant(id: $id) {\n        dishes {\n          id\n          name\n          price\n          description\n          image {\n            url\n          }\n        }\n      }\n    }\n  `;\n  const { loading: loadingDishes, error: errorDishes, data: dataDishes } = useQuery(GET_DISHES, {\n    variables: { id: restaurantID }\n  });\n\n  const GET_DRINKS = gql`\n    query GetDrinks($id: ID!) {\n      restaurant(id: $id) {\n        drinks {\n          id\n          name\n          price\n          description\n        }\n      }\n    }\n  `;\n  const { loading: loadingDrinks, error: errorDrinks, data: dataDrinks } = useQuery(GET_DRINKS, {\n    variables: { id: restaurantID }\n  });\n\n  // Define renderer for Dishes\n  const renderDishes = () => {\n    if (loadingDishes) return <p>Loading...</p>;\n    if (errorDishes) return <p>Error</p>;\n    if (!dataDishes) return <p>Not found</p>;\n    return (<Dishes dishes={dataDishes.restaurant.dishes}></Dishes>)\n  };\n  \n  // Define renderer for Drinks\n  const renderDrinks = () => {\n    if (loadingDrinks) return <p>Loading...</p>;\n    if (errorDrinks) return <p>Error</p>;\n    if (!dataDrinks) return <p>Not found</p>;\n    return (<Drinks drinks={dataDrinks.restaurant.drinks}></Drinks>)\n  };\n  if(searchQuery.length > 0){\n    const restList = searchQuery.map((res) => (\n      <Col xs=\"6\" sm=\"4\" key={res.id}>\n        <Card style={{ margin: \"0 0.5rem 20px 0.5rem\" }}>\n          <CardImg\n            top={true}\n            style={{ height: 200 }}\n            src={\n            `http://localhost:1337`+ res.image.url\n            }\n          />\n          <CardBody>\n            <CardText>{res.description}</CardText>\n          </CardBody>\n          <div className=\"card-footer\">\n          \n          <Button color=\"info\" onClick={()=> setRestaurantID(res.id)}>{res.name}</Button>\n           \n          </div>\n        </Card>\n      </Col>\n    ))\n  \n    return(\n      <Container>\n        <Row xs='3'>\n          {restList}\n        </Row>\n        <Row xs='3'>\n          {renderDishes(restaurantID)}\n        </Row>\n        <Row xs='3'>\n          {renderDrinks(restaurantID)}\n        </Row>\n      </Container>\n    )\n  } else {\n    return <h1> No Restaurants Found</h1>\n  }\n}\nexport default RestaurantList;\n"]},"metadata":{},"sourceType":"module"}