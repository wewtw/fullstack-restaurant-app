{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\X\\\\Desktop\\\\MIT-Bootcamp-WebDev\\\\Week29\\\\setting-up-stripe_starter\\\\components\\\\restaurantList.js\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { useState, useContext } from \"react\";\nimport { gql, useQuery } from \"@apollo/client\";\nimport Dishes from \"./dishes\";\nimport Drinks from \"./drinks\";\nimport AppContext from \"./context\";\nimport { Button, Card, CardBody, CardImg, CardText, CardTitle, Container, Row, Col } from \"reactstrap\";\n\nfunction RestaurantList(props) {\n  const {\n    0: restaurantID,\n    1: setRestaurantID\n  } = useState(0);\n  const {\n    cart\n  } = useContext(AppContext);\n  const {\n    0: state,\n    1: setState\n  } = useState(cart);\n  const GET_RESTAURANTS = gql`\n  query GetRestaurants{\n    restaurants {\n      id\n      name\n      description\n      image {\n        url\n      }\n      dishes {\n        id\n        name\n        description\n        price\n      }\n      drink {\n        id\n        price\n        name\n        description\n      }\n    }\n  }\n`;\n  const {\n    loading,\n    error,\n    data\n  } = useQuery(GET_RESTAURANTS, {\n    variables: {\n      id: restaurantID\n    }\n  });\n  if (loading) return __jsx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 23\n    }\n  }, \"Loading...\");\n\n  if (error) {\n    console.log(error);\n    return __jsx(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 42\n      }\n    }, \"ERROR\");\n  }\n\n  if (!data) return __jsx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 21\n    }\n  }, \"Not found\");\n  console.log(`Query Data: ${data.restaurants}`);\n  let searchQuery = data.restaurants.map(res => {\n    if (res.id === restaurantID) {\n      return _objectSpread(_objectSpread({}, res), {}, {\n        dishes: res.dishes.filter(dish => dish.name.toLowerCase().includes(props.search)),\n        drink: Array.isArray(res.drink) ? res.drink.filter(drinks => drinks.name.toLowerCase().includes(props.search)) : []\n      });\n    } else {\n      return _objectSpread(_objectSpread({}, res), {}, {\n        dishes: res.dishes.filter(dish => dish.name.toLowerCase().includes(props.search)),\n        drink: Array.isArray(res.drink) ? res.drink.filter(drinks => drinks.name.toLowerCase().includes(props.search)) : [],\n        showDishes: false,\n        showDrinks: false\n      });\n    }\n  }).filter(res => res.dishes.length + res.drink.length > 0);\n  const restId = restaurantID;\n\n  const handleRestaurantClick = res => {\n    if (res.id === restaurantID) {\n      setRestaurantID(0); // if already selected, deselect\n    } else {\n      setRestaurantID(res.id);\n    }\n  }; // define renderer for Dishes\n\n\n  const renderDishes = () => {\n    if (restId === 0 || !data) return null;\n    const restaurant = data.restaurants.find(res => res.id === restId);\n    if (!restaurant) return null;\n    return __jsx(Dishes, {\n      restaurant: restaurant,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 12\n      }\n    });\n  };\n\n  const renderDrinks = () => {\n    if (restId === 0 || !data) return null;\n    const restaurant = data.restaurants.find(res => res.id === restId);\n    if (!restaurant) return null;\n    return __jsx(Drinks, {\n      restaurant: restaurant,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 12\n      }\n    });\n  };\n\n  const restList = searchQuery.map(res => __jsx(Col, {\n    xs: \"6\",\n    sm: \"4\",\n    key: res.id,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 5\n    }\n  }, __jsx(Card, {\n    style: {\n      margin: \"0 0.5rem 20px 0.5rem\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 7\n    }\n  }, __jsx(CardImg, {\n    top: true,\n    style: {\n      height: 200\n    },\n    src: `http://localhost:1337` + res.image.url,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 9\n    }\n  }), __jsx(CardBody, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 9\n    }\n  }, __jsx(CardText, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 11\n    }\n  }, res.description)), __jsx(\"div\", {\n    className: \"card-footer\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 9\n    }\n  }, __jsx(Button, {\n    color: res.id === restaurantID ? \"secondary\" : \"info\",\n    onClick: () => handleRestaurantClick(res),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 11\n    }\n  }, res.name)))));\n  return __jsx(Container, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 5\n    }\n  }, __jsx(Row, {\n    xs: \"3\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 7\n    }\n  }, restList));\n}\n\nexport default RestaurantList;","map":{"version":3,"sources":["C:/Users/X/Desktop/MIT-Bootcamp-WebDev/Week29/setting-up-stripe_starter/components/restaurantList.js"],"names":["React","useState","useContext","gql","useQuery","Dishes","Drinks","AppContext","Button","Card","CardBody","CardImg","CardText","CardTitle","Container","Row","Col","RestaurantList","props","restaurantID","setRestaurantID","cart","state","setState","GET_RESTAURANTS","loading","error","data","variables","id","console","log","restaurants","searchQuery","map","res","dishes","filter","dish","name","toLowerCase","includes","search","drink","Array","isArray","drinks","showDishes","showDrinks","length","restId","handleRestaurantClick","renderDishes","restaurant","find","renderDrinks","restList","margin","height","image","url","description"],"mappings":";;;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,UAA1B,QAA4C,OAA5C;AACA,SAASC,GAAT,EAAcC,QAAd,QAA8B,gBAA9B;AACA,OAAOC,MAAP,MAAmB,UAAnB;AACA,OAAOC,MAAP,MAAmB,UAAnB;AACA,OAAOC,UAAP,MAAuB,WAAvB;AACA,SACEC,MADF,EAEEC,IAFF,EAGEC,QAHF,EAIEC,OAJF,EAKEC,QALF,EAMEC,SANF,EAOEC,SAPF,EAQEC,GARF,EASEC,GATF,QAUO,YAVP;;AAYA,SAASC,cAAT,CAAwBC,KAAxB,EAA+B;AAC7B,QAAM;AAAA,OAACC,YAAD;AAAA,OAAeC;AAAf,MAAkCnB,QAAQ,CAAC,CAAD,CAAhD;AACA,QAAM;AAAEoB,IAAAA;AAAF,MAAWnB,UAAU,CAACK,UAAD,CAA3B;AACA,QAAM;AAAA,OAACe,KAAD;AAAA,OAAQC;AAAR,MAAoBtB,QAAQ,CAACoB,IAAD,CAAlC;AACA,QAAMG,eAAe,GAAGrB,GAAI;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAvBE;AAyBF,QAAM;AAAEsB,IAAAA,OAAF;AAAWC,IAAAA,KAAX;AAAkBC,IAAAA;AAAlB,MAA2BvB,QAAQ,CAACoB,eAAD,EAAkB;AACzDI,IAAAA,SAAS,EAAE;AAAEC,MAAAA,EAAE,EAAEV;AAAN;AAD8C,GAAlB,CAAzC;AAIE,MAAIM,OAAJ,EAAa,OAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAAP;;AACb,MAAIC,KAAJ,EAAW;AAACI,IAAAA,OAAO,CAACC,GAAR,CAAYL,KAAZ;AAAoB,WAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAAP;AAAqB;;AACrD,MAAI,CAACC,IAAL,EAAW,OAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBAAP;AACXG,EAAAA,OAAO,CAACC,GAAR,CAAa,eAAcJ,IAAI,CAACK,WAAY,EAA5C;AAEA,MAAIC,WAAW,GAAGN,IAAI,CAACK,WAAL,CACjBE,GADiB,CACZC,GAAD,IAAS;AACZ,QAAIA,GAAG,CAACN,EAAJ,KAAWV,YAAf,EAA6B;AAC3B,6CACKgB,GADL;AAEEC,QAAAA,MAAM,EAAED,GAAG,CAACC,MAAJ,CAAWC,MAAX,CAAmBC,IAAD,IACxBA,IAAI,CAACC,IAAL,CAAUC,WAAV,GAAwBC,QAAxB,CAAiCvB,KAAK,CAACwB,MAAvC,CADM,CAFV;AAKEC,QAAAA,KAAK,EAAEC,KAAK,CAACC,OAAN,CAAcV,GAAG,CAACQ,KAAlB,IAA2BR,GAAG,CAACQ,KAAJ,CAAUN,MAAV,CAAkBS,MAAD,IACjDA,MAAM,CAACP,IAAP,CAAYC,WAAZ,GAA0BC,QAA1B,CAAmCvB,KAAK,CAACwB,MAAzC,CADgC,CAA3B,GAEH;AAPN;AASD,KAVD,MAUO;AACL,6CACKP,GADL;AAEEC,QAAAA,MAAM,EAAED,GAAG,CAACC,MAAJ,CAAWC,MAAX,CAAmBC,IAAD,IACxBA,IAAI,CAACC,IAAL,CAAUC,WAAV,GAAwBC,QAAxB,CAAiCvB,KAAK,CAACwB,MAAvC,CADM,CAFV;AAKEC,QAAAA,KAAK,EAAEC,KAAK,CAACC,OAAN,CAAcV,GAAG,CAACQ,KAAlB,IAA2BR,GAAG,CAACQ,KAAJ,CAAUN,MAAV,CAAkBS,MAAD,IACjDA,MAAM,CAACP,IAAP,CAAYC,WAAZ,GAA0BC,QAA1B,CAAmCvB,KAAK,CAACwB,MAAzC,CADgC,CAA3B,GAEH,EAPN;AAQEK,QAAAA,UAAU,EAAE,KARd;AASEC,QAAAA,UAAU,EAAE;AATd;AAWD;AACF,GAzBiB,EA0BjBX,MA1BiB,CA0BTF,GAAD,IAASA,GAAG,CAACC,MAAJ,CAAWa,MAAX,GAAoBd,GAAG,CAACQ,KAAJ,CAAUM,MAA9B,GAAuC,CA1BtC,CAAlB;AA8BA,QAAMC,MAAM,GAAG/B,YAAf;;AAEA,QAAMgC,qBAAqB,GAAIhB,GAAD,IAAS;AACrC,QAAIA,GAAG,CAACN,EAAJ,KAAWV,YAAf,EAA6B;AAC3BC,MAAAA,eAAe,CAAC,CAAD,CAAf,CAD2B,CACP;AACrB,KAFD,MAEO;AACLA,MAAAA,eAAe,CAACe,GAAG,CAACN,EAAL,CAAf;AACD;AACF,GAND,CAtE6B,CA8E7B;;;AACA,QAAMuB,YAAY,GAAG,MAAM;AACzB,QAAIF,MAAM,KAAK,CAAX,IAAgB,CAACvB,IAArB,EAA2B,OAAO,IAAP;AAC3B,UAAM0B,UAAU,GAAG1B,IAAI,CAACK,WAAL,CAAiBsB,IAAjB,CAAuBnB,GAAD,IAASA,GAAG,CAACN,EAAJ,KAAWqB,MAA1C,CAAnB;AACA,QAAI,CAACG,UAAL,EAAiB,OAAO,IAAP;AACjB,WAAO,MAAC,MAAD;AAAQ,MAAA,UAAU,EAAEA,UAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAP;AACD,GALD;;AAOA,QAAME,YAAY,GAAG,MAAM;AACzB,QAAIL,MAAM,KAAK,CAAX,IAAgB,CAACvB,IAArB,EAA2B,OAAO,IAAP;AAC3B,UAAM0B,UAAU,GAAG1B,IAAI,CAACK,WAAL,CAAiBsB,IAAjB,CAAuBnB,GAAD,IAASA,GAAG,CAACN,EAAJ,KAAWqB,MAA1C,CAAnB;AACA,QAAI,CAACG,UAAL,EAAiB,OAAO,IAAP;AACjB,WAAO,MAAC,MAAD;AAAQ,MAAA,UAAU,EAAEA,UAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAP;AACD,GALD;;AASA,QAAMG,QAAQ,GAAGvB,WAAW,CAACC,GAAZ,CAAiBC,GAAD,IAC/B,MAAC,GAAD;AAAK,IAAA,EAAE,EAAC,GAAR;AAAY,IAAA,EAAE,EAAC,GAAf;AAAmB,IAAA,GAAG,EAAEA,GAAG,CAACN,EAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,IAAD;AAAM,IAAA,KAAK,EAAE;AAAE4B,MAAAA,MAAM,EAAE;AAAV,KAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,OAAD;AACE,IAAA,GAAG,EAAE,IADP;AAEE,IAAA,KAAK,EAAE;AAAEC,MAAAA,MAAM,EAAE;AAAV,KAFT;AAGE,IAAA,GAAG,EAAG,uBAAD,GAA0BvB,GAAG,CAACwB,KAAJ,CAAUC,GAH3C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,EAME,MAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAWzB,GAAG,CAAC0B,WAAf,CADF,CANF,EASE;AAAK,IAAA,SAAS,EAAC,aAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,MAAD;AACE,IAAA,KAAK,EAAE1B,GAAG,CAACN,EAAJ,KAAWV,YAAX,GAA0B,WAA1B,GAAwC,MADjD;AAEE,IAAA,OAAO,EAAE,MAAMgC,qBAAqB,CAAChB,GAAD,CAFtC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAIGA,GAAG,CAACI,IAJP,CADF,CATF,CADF,CADe,CAAjB;AAuBA,SACE,MAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,GAAD;AAAK,IAAA,EAAE,EAAC,GAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAaiB,QAAb,CADF,CADF;AAKD;;AAED,eAAevC,cAAf","sourcesContent":["import React, { useState, useContext } from \"react\";\nimport { gql, useQuery } from \"@apollo/client\";\nimport Dishes from \"./dishes\";\nimport Drinks from \"./drinks\";\nimport AppContext from \"./context\";\nimport {\n  Button,\n  Card,\n  CardBody,\n  CardImg,\n  CardText,\n  CardTitle,\n  Container,\n  Row,\n  Col,\n} from \"reactstrap\";\n\nfunction RestaurantList(props) {\n  const [restaurantID, setRestaurantID] = useState(0);\n  const { cart } = useContext(AppContext);\n  const [state, setState] = useState(cart);\n  const GET_RESTAURANTS = gql`\n  query GetRestaurants{\n    restaurants {\n      id\n      name\n      description\n      image {\n        url\n      }\n      dishes {\n        id\n        name\n        description\n        price\n      }\n      drink {\n        id\n        price\n        name\n        description\n      }\n    }\n  }\n`;\n\nconst { loading, error, data } = useQuery(GET_RESTAURANTS, {\n  variables: { id: restaurantID },\n});\n\n  if (loading) return <p>Loading...</p>;\n  if (error) {console.log(error); return <p>ERROR</p>;}\n  if (!data) return <p>Not found</p>;\n  console.log(`Query Data: ${data.restaurants}`);\n\n  let searchQuery = data.restaurants\n  .map((res) => {\n    if (res.id === restaurantID) {\n      return {\n        ...res,\n        dishes: res.dishes.filter((dish) =>\n          dish.name.toLowerCase().includes(props.search)\n        ),\n        drink: Array.isArray(res.drink) ? res.drink.filter((drinks) =>\n          drinks.name.toLowerCase().includes(props.search)\n        ) : [],\n      };\n    } else {\n      return {\n        ...res,\n        dishes: res.dishes.filter((dish) =>\n          dish.name.toLowerCase().includes(props.search)\n        ),\n        drink: Array.isArray(res.drink) ? res.drink.filter((drinks) =>\n          drinks.name.toLowerCase().includes(props.search)\n        ) : [],\n        showDishes: false,\n        showDrinks: false,\n      };\n    }\n  })\n  .filter((res) => res.dishes.length + res.drink.length > 0);\n\n\n\n  const restId = restaurantID;\n\n  const handleRestaurantClick = (res) => {\n    if (res.id === restaurantID) {\n      setRestaurantID(0); // if already selected, deselect\n    } else {\n      setRestaurantID(res.id);\n    }\n  };\n\n  // define renderer for Dishes\n  const renderDishes = () => {\n    if (restId === 0 || !data) return null;\n    const restaurant = data.restaurants.find((res) => res.id === restId);\n    if (!restaurant) return null;\n    return <Dishes restaurant={restaurant} />;\n  };\n  \n  const renderDrinks = () => {\n    if (restId === 0 || !data) return null;\n    const restaurant = data.restaurants.find((res) => res.id === restId);\n    if (!restaurant) return null;\n    return <Drinks restaurant={restaurant} />;\n  };\n  \n  \n\n  const restList = searchQuery.map((res) => (\n    <Col xs=\"6\" sm=\"4\" key={res.id}>\n      <Card style={{ margin: \"0 0.5rem 20px 0.5rem\" }}>\n        <CardImg\n          top={true}\n          style={{ height: 200 }}\n          src={`http://localhost:1337` + res.image.url}\n        />\n        <CardBody>\n          <CardText>{res.description}</CardText>\n        </CardBody>\n        <div className=\"card-footer\">\n          <Button\n            color={res.id === restaurantID ? \"secondary\" : \"info\"}\n            onClick={() => handleRestaurantClick(res)}\n          >\n            {res.name}\n          </Button>\n        </div>\n      </Card>\n    </Col>\n  ));\n\n  return (\n    <Container>\n      <Row xs=\"3\">{restList}</Row>\n    </Container>\n  );\n}\n\nexport default RestaurantList;\n"]},"metadata":{},"sourceType":"module"}