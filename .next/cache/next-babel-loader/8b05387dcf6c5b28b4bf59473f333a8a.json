{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\X\\\\Desktop\\\\MIT-Bootcamp-WebDev\\\\Week29\\\\setting-up-stripe_starter\\\\components\\\\restaurantList.js\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { useState, useContext } from \"react\";\nimport { gql, useQuery } from \"@apollo/client\";\nimport Dishes from \"./dishes\";\nimport Drinks from \"./drinks\";\nimport AppContext from \"./context\";\nimport { Button, Card, CardBody, CardImg, CardText, CardTitle, Col, Container, Row } from \"reactstrap\";\n\nfunction RestaurantList(props) {\n  const {\n    0: selectedRestaurant,\n    1: setSelectedRestaurant\n  } = useState(null);\n  const {\n    cart\n  } = useContext(AppContext);\n  const {\n    0: state,\n    1: setState\n  } = useState(cart);\n  const GET_RESTAURANTS = gql`\n    query {\n      restaurants {\n        id\n        name\n        description\n        image {\n          url\n        }\n        dishes {\n          id\n          name\n          description\n          price\n        }\n        drinks {\n          id\n          price\n          name\n          description\n        }\n      }\n    }\n  `;\n  const {\n    loading,\n    error,\n    data\n  } = useQuery(GET_RESTAURANTS);\n  if (loading) return __jsx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 23\n    }\n  }, \"Loading...\");\n\n  if (error) {\n    console.log(error);\n    return __jsx(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 12\n      }\n    }, \"ERROR\");\n  }\n\n  if (!data) return __jsx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 21\n    }\n  }, \"Not found\");\n  const filteredRestaurants = data.restaurants.filter(restaurant => {\n    const hasFilteredDishes = restaurant.dishes.some(dish => {\n      return dish.name.toLowerCase().includes(props.search.toLowerCase());\n    });\n    const hasFilteredDrinks = restaurant.drinks.some(drink => {\n      return drink.name.toLowerCase().includes(props.search.toLowerCase());\n    });\n    return hasFilteredDishes || hasFilteredDrinks || restaurant.name.toLowerCase().includes(props.search.toLowerCase());\n  });\n\n  const handleRestaurantClick = restaurant => {\n    setSelectedRestaurant(restaurant);\n  };\n\n  const renderDishes = () => {\n    if (!selectedRestaurant) return null;\n    return __jsx(Dishes, {\n      restId: selectedRestaurant.id,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 12\n      }\n    });\n  };\n\n  const renderDrinks = () => {\n    if (!selectedRestaurant) return null;\n    return __jsx(Drinks, {\n      restId: selectedRestaurant.id,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 12\n      }\n    });\n  };\n\n  const renderRestaurants = () => {\n    if (filteredRestaurants.length === 0) {\n      return __jsx(\"p\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 85,\n          columnNumber: 14\n        }\n      }, \"No results found.\");\n    }\n\n    return filteredRestaurants.map(restaurant => {\n      const hasFilteredDishes = restaurant.dishes.some(dish => {\n        return dish.name.toLowerCase().includes(props.search.toLowerCase());\n      });\n      const hasFilteredDrinks = restaurant.drinks.some(drink => {\n        return drink.name.toLowerCase().includes(props.search.toLowerCase());\n      });\n      const hasFilteredItems = hasFilteredDishes || hasFilteredDrinks;\n      return __jsx(Col, {\n        xs: \"6\",\n        sm: \"4\",\n        key: restaurant.id,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 98,\n          columnNumber: 9\n        }\n      }, __jsx(Card, {\n        style: {\n          margin: \"0 0.5rem 20px 0.5rem\"\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 99,\n          columnNumber: 11\n        }\n      }, __jsx(CardImg, {\n        top: true,\n        style: {\n          height: 200\n        },\n        src: `http://localhost:1337${restaurant.image.url}`,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 100,\n          columnNumber: 13\n        }\n      }), __jsx(CardBody, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 105,\n          columnNumber: 13\n        }\n      }, __jsx(CardTitle, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 106,\n          columnNumber: 15\n        }\n      }, restaurant.name), __jsx(CardText, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 107,\n          columnNumber: 15\n        }\n      }, restaurant.description)), __jsx(\"div\", {\n        className: \"card-footer\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 109,\n          columnNumber: 13\n        }\n      }, __jsx(Button, {\n        color: selectedRestaurant && selectedRestaurant.id === restaurant.id ? \"secondary\" : \"info\",\n        onClick: () => handleRestaurantClick(restaurant),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 110,\n          columnNumber: 15\n        }\n      }, restaurant.name)), hasFilteredItems && __jsx(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 122,\n          columnNumber: 15\n        }\n      }, __jsx(Button, {\n        color: selectedRestaurant && selectedRestaurant.id === restaurant.id && selectedRestaurant.showDishes && !selectedRestaurant.showDrinks ? \"secondary\" : \"info\",\n        onClick: () => setSelectedRestaurant(_objectSpread(_objectSpread({}, selectedRestaurant), {}, {\n          showDishes: true,\n          showDrinks: false\n        })),\n        style: {\n          marginRight: \"0.5rem\",\n          marginTop: \"0.5rem\"\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 123,\n          columnNumber: 17\n        }\n      }, \"Dishes\"), __jsx(Button, {\n        color: selectedRestaurant && selectedRestaurant.id === restaurant.id && selectedRestaurant.showDrinks ? \"secondary\" : \"info\",\n        onClick: () => setSelectedRestaurant(_objectSpread(_objectSpread({}, selectedRestaurant), {}, {\n          showDishes: false,\n          showDrinks: true\n        })),\n        style: {\n          marginTop: \"0.5rem\"\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 143,\n          columnNumber: 17\n        }\n      }, \"Drinks\"))));\n    });\n  };\n\n  const renderInventory = () => {\n    if (!selectedRestaurant) return null;\n    if (selectedRestaurant.showDishes) return renderDishes();\n    if (selectedRestaurant.showDrinks) return renderDrinks();\n    return null;\n  };\n\n  const updateState = newState => {\n    setState(newState);\n  };\n\n  return __jsx(Container, {\n    style: {\n      marginTop: \"20px\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 182,\n      columnNumber: 5\n    }\n  }, __jsx(Row, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 183,\n      columnNumber: 7\n    }\n  }, __jsx(Col, {\n    xs: \"12\",\n    sm: \"9\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 185,\n      columnNumber: 9\n    }\n  }, __jsx(\"h1\", {\n    style: {\n      marginBottom: \"20px\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 186,\n      columnNumber: 11\n    }\n  }, \"Restaurants\"), __jsx(Row, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 187,\n      columnNumber: 11\n    }\n  }, renderRestaurants()), __jsx(Row, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 188,\n      columnNumber: 12\n    }\n  }, renderInventory()))));\n}\n\nexport default RestaurantList;","map":{"version":3,"sources":["C:/Users/X/Desktop/MIT-Bootcamp-WebDev/Week29/setting-up-stripe_starter/components/restaurantList.js"],"names":["React","useState","useContext","gql","useQuery","Dishes","Drinks","AppContext","Button","Card","CardBody","CardImg","CardText","CardTitle","Col","Container","Row","RestaurantList","props","selectedRestaurant","setSelectedRestaurant","cart","state","setState","GET_RESTAURANTS","loading","error","data","console","log","filteredRestaurants","restaurants","filter","restaurant","hasFilteredDishes","dishes","some","dish","name","toLowerCase","includes","search","hasFilteredDrinks","drinks","drink","handleRestaurantClick","renderDishes","id","renderDrinks","renderRestaurants","length","map","hasFilteredItems","margin","height","image","url","description","showDishes","showDrinks","marginRight","marginTop","renderInventory","updateState","newState","marginBottom"],"mappings":"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","sourcesContent":["import React, { useState, useContext } from \"react\";\nimport { gql, useQuery } from \"@apollo/client\";\nimport Dishes from \"./dishes\";\nimport Drinks from \"./drinks\";\nimport AppContext from \"./context\";\nimport {\n  Button,\n  Card,\n  CardBody,\n  CardImg,\n  CardText,\n  CardTitle,\n  Col,\n  Container,\n  Row,\n} from \"reactstrap\";\n\nfunction RestaurantList(props) {\n  const [selectedRestaurant, setSelectedRestaurant] = useState(null);\n  const { cart } = useContext(AppContext);\n  const [state, setState] = useState(cart);\n  const GET_RESTAURANTS = gql`\n    query {\n      restaurants {\n        id\n        name\n        description\n        image {\n          url\n        }\n        dishes {\n          id\n          name\n          description\n          price\n        }\n        drinks {\n          id\n          price\n          name\n          description\n        }\n      }\n    }\n  `;\n  const { loading, error, data } = useQuery(GET_RESTAURANTS);\n  if (loading) return <p>Loading...</p>;\n  if (error) {\n    console.log(error);\n    return <p>ERROR</p>;\n  }\n  if (!data) return <p>Not found</p>;\n\n  const filteredRestaurants = data.restaurants.filter((restaurant) => {\n    const hasFilteredDishes = restaurant.dishes.some((dish) => {\n      return dish.name.toLowerCase().includes(props.search.toLowerCase());\n    });\n    const hasFilteredDrinks = restaurant.drinks.some((drink) => {\n      return drink.name.toLowerCase().includes(props.search.toLowerCase());\n    });\n\n    return (\n      hasFilteredDishes ||\n      hasFilteredDrinks ||\n      restaurant.name.toLowerCase().includes(props.search.toLowerCase())\n    );\n  });\n\n  const handleRestaurantClick = (restaurant) => {\n    setSelectedRestaurant(restaurant);\n  };\n\n  const renderDishes = () => {\n    if (!selectedRestaurant) return null;\n    return <Dishes restId={selectedRestaurant.id} />;\n  };\n\n  const renderDrinks = () => {\n    if (!selectedRestaurant) return null;\n    return <Drinks restId={selectedRestaurant.id} />;\n  };\n\n  const renderRestaurants = () => {\n    if (filteredRestaurants.length === 0) {\n      return <p>No results found.</p>;\n    }\n\n    return filteredRestaurants.map((restaurant) => {\n      const hasFilteredDishes = restaurant.dishes.some((dish) => {\n        return dish.name.toLowerCase().includes(props.search.toLowerCase());\n      });\n      const hasFilteredDrinks = restaurant.drinks.some((drink) => {\n        return drink.name.toLowerCase().includes(props.search.toLowerCase());\n      });\n      const hasFilteredItems = hasFilteredDishes || hasFilteredDrinks;\n\n      return (\n        <Col xs=\"6\" sm=\"4\" key={restaurant.id}>\n          <Card style={{ margin: \"0 0.5rem 20px 0.5rem\" }}>\n            <CardImg\n              top={true}\n              style={{ height: 200 }}\n              src={`http://localhost:1337${restaurant.image.url}`}\n            />\n            <CardBody>\n              <CardTitle>{restaurant.name}</CardTitle>\n              <CardText>{restaurant.description}</CardText>\n            </CardBody>\n            <div className=\"card-footer\">\n              <Button\n                color={\n                  selectedRestaurant && selectedRestaurant.id === restaurant.id\n                    ? \"secondary\"\n                    : \"info\"\n                }\n                onClick={() => handleRestaurantClick(restaurant)}\n              >\n                {restaurant.name}\n              </Button>\n            </div>\n            {hasFilteredItems && (\n              <div>\n                <Button\n                  color={\n                    selectedRestaurant &&\n                    selectedRestaurant.id === restaurant.id &&\n                    selectedRestaurant.showDishes &&\n                    !selectedRestaurant.showDrinks\n                      ? \"secondary\"\n                      : \"info\"\n                  }\n                  onClick={() =>\n                    setSelectedRestaurant({\n                      ...selectedRestaurant,\n                      showDishes: true,\n                      showDrinks: false,\n                    })\n                  }\n                  style={{ marginRight: \"0.5rem\", marginTop: \"0.5rem\" }}\n                >\n                  Dishes\n                </Button>\n                <Button\n                  color={\n                    selectedRestaurant &&\n                    selectedRestaurant.id === restaurant.id &&\n                    selectedRestaurant.showDrinks\n                      ? \"secondary\"\n                      : \"info\"\n                  }\n                  onClick={() =>\n                    setSelectedRestaurant({\n                      ...selectedRestaurant,\n                      showDishes: false,\n                      showDrinks: true,\n                    })\n                  }\n                  style={{ marginTop: \"0.5rem\" }}\n                >\n                  Drinks\n                </Button>\n              </div>\n            )}\n          </Card>\n        </Col>\n      );\n    });\n  };\n\n  const renderInventory = () => {\n    if (!selectedRestaurant) return null;\n    if (selectedRestaurant.showDishes) return renderDishes();\n    if (selectedRestaurant.showDrinks) return renderDrinks();\n    return null;\n  };\n\n  const updateState = (newState) => {\n    setState(newState);\n  };\n\n  return (\n    <Container style={{ marginTop: \"20px\" }}>\n      <Row>\n       \n        <Col xs=\"12\" sm=\"9\">\n          <h1 style={{ marginBottom: \"20px\" }}>Restaurants</h1>\n          <Row>{renderRestaurants()}</Row>\n           <Row>{renderInventory()}</Row>\n        </Col>\n      </Row>\n    </Container>\n  );\n}\n\nexport default RestaurantList;\n"]},"metadata":{},"sourceType":"module"}