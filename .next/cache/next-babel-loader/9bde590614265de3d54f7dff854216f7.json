{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { useContext } from \"react\";\nimport { gql, useQuery } from \"@apollo/client\";\nimport { Button, Card, CardBody, CardImg, CardText, CardTitle, Col, Container, Row } from 'reactstrap';\nimport AppContext from \"./context\"; ////my new drinks items\n\nfunction Drinks({\n  restId,\n  searchQuery\n}) {\n  const {\n    addItem\n  } = useContext(AppContext);\n  const GET_RESTAURANT_DRINKS = gql`\n    query($id: ID!) {\n      restaurant(id: $id) {\n        id\n        name\n        drinks {\n          id\n          name\n          description\n          price\n          image {\n            url\n          }\n        }\n      }\n    }\n  `;\n  const {\n    loading,\n    error,\n    data\n  } = useQuery(GET_RESTAURANT_DRINKS, {\n    variables: {\n      id: restId\n    }\n  });\n  if (loading) return __jsx(\"p\", null, \"Loading drink...\");\n  if (error) return __jsx(\"p\", null, \"Error: \", error.message);\n  if (!data) return __jsx(\"p\", null, \"No drinks found\"); ///added filtering props\n\n  const drinks = data.restaurant.drinks.filter(drink => drink.name.toLowerCase().includes(searchQuery.toLowerCase()));\n  return __jsx(React.Fragment, null, drinks.map(drink => __jsx(Col, {\n    xs: \"6\",\n    sm: \"4\",\n    style: {\n      padding: 1\n    },\n    key: drink.id\n  }, __jsx(Card, {\n    style: {\n      margin: \"0 0.5rem 20px 0.5rem\",\n      color: 'blue',\n      background: \"lightgreen\",\n      marginBottom: \"2rem\"\n    }\n  }, __jsx(CardImg, {\n    top: true,\n    style: {\n      height: 190,\n      padding: 5\n    },\n    src: `http://localhost:1337${drink.image.url}`\n  }), __jsx(CardBody, null, __jsx(CardTitle, null, drink.name), __jsx(CardText, null, drink.description), __jsx(CardText, null, \"$\", drink.price)), __jsx(\"div\", {\n    className: \"card-footer\"\n  }, __jsx(Button, {\n    outline: true,\n    color: \"primary\",\n    onClick: () => addItem(drink)\n  }, \"+ Add To Cart\"))))));\n}\n\nexport default Drinks;","map":null,"metadata":{},"sourceType":"module"}