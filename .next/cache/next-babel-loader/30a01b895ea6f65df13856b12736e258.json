{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nvar __jsx = React.createElement;\nimport React, { useState, useEffect } from \"react\";\nimport { getUserFromLocalStorage } from \"../components/auth\"; //importing the getUserFromLocalStorage function to get the currently logged in user. step-1.\n\nfunction Receipts() {\n  var _useState = useState([]),\n      orders = _useState[0],\n      setOrders = _useState[1]; // will store list of orders. step-2\n\n\n  var API_URL = process.env.NEXT_PUBLIC_API_URL || \"http://localhost:1337\"; //set up the api url. step-3.\n  //last good no errors.\n\n  useEffect(function () {\n    //hook to fetch the orders data from the Strapi API, using the logged in user's ID as a query parameter.step-4.\n    var fetchData = /*#__PURE__*/function () {\n      var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        var user, response, data;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.prev = 0;\n                user = getUserFromLocalStorage();\n\n                if (user) {\n                  _context.next = 5;\n                  break;\n                }\n\n                console.log(\"User not found\");\n                return _context.abrupt(\"return\");\n\n              case 5:\n                _context.next = 7;\n                return fetch(\"\".concat(API_URL, \"/orders?user=\").concat(user.id), {\n                  headers: {\n                    Authorization: \"Bearer \".concat(user.jwt)\n                  }\n                });\n\n              case 7:\n                response = _context.sent;\n                _context.next = 10;\n                return response.json();\n\n              case 10:\n                data = _context.sent;\n                setOrders(data);\n                _context.next = 17;\n                break;\n\n              case 14:\n                _context.prev = 14;\n                _context.t0 = _context[\"catch\"](0);\n                console.log(_context.t0);\n\n              case 17:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, null, [[0, 14]]);\n      }));\n\n      return function fetchData() {\n        return _ref.apply(this, arguments);\n      };\n    }();\n\n    fetchData();\n  }, []); ///map orders. step-5.\n  //divded the amount by 100 to fix to a dollar.\n  ///added a new status field. admin can set status in the panel. \n  //next step make a new page just for workers who can set status to shiped or delivered.   \n\n  return __jsx(\"div\", {\n    style: {\n      marginBottom: \"2rem\"\n    }\n  }, __jsx(\"h1\", {\n    style: {\n      fontSize: \"2rem\",\n      marginBottom: \"1rem\",\n      marginTop: \"1rem\"\n    }\n  }, \"Order History\"), orders.map(function (order, index) {\n    return __jsx(\"div\", {\n      key: order.id,\n      style: {\n        fontSize: \"1.5rem\",\n        border: \"1px solid #ccc\",\n        background: \"white\",\n        padding: \"1rem\",\n        marginBottom: index === orders.length - 1 ? 0 : \"1rem\"\n      }\n    }, __jsx(\"p\", null, \"Order ID: \", order.id), __jsx(\"p\", null, \"Amount: $\", order.amount / 100), __jsx(\"p\", null, \"Status: \", order.status));\n  }));\n}\n\nexport default Receipts;","map":null,"metadata":{},"sourceType":"module"}