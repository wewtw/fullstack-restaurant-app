{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\X\\\\Desktop\\\\MIT-Bootcamp-WebDev\\\\Week29\\\\setting-up-stripe_starter\\\\components\\\\restaurantList.js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { gql, useQuery } from '@apollo/client';\nimport Dishes from \"./dishes\";\nimport { useContext, useState } from 'react';\nimport Drinks from \"./drinks\";\nimport AppContext from \"./context\";\nimport { Button, Card, CardBody, CardImg, CardText, CardTitle, Container, Row, Col } from \"reactstrap\";\n\nfunction RestaurantList(props) {\n  const {\n    0: searchQuery,\n    1: setSearchQuery\n  } = useState(props.search);\n  const {\n    0: restaurantID,\n    1: setRestaurantID\n  } = useState(0);\n  const {\n    cart\n  } = useContext(AppContext);\n  const {\n    0: state,\n    1: setState\n  } = useState(cart);\n  const GET_RESTAURANTS = gql`\n  query {\n    restaurants {\n      id\n      name\n      description\n      image {\n        url\n      }\n      dishes {\n        id\n        name\n        price\n        image {\n          url\n        }\n      }\n      drinks {\n        id\n        name\n        price\n        image {\n          url\n        }\n      }\n    }\n  }\n`;\n  const {\n    0: searchDishes,\n    1: setSearchDishes\n  } = useState(\"\");\n  const {\n    0: searchDrinks,\n    1: setSearchDrinks\n  } = useState(\"\");\n  const {\n    loading,\n    error,\n    data\n  } = useQuery(GET_RESTAURANTS);\n  if (loading) return __jsx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 23\n    }\n  }, \"Loading...\");\n  if (error) return __jsx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 21\n    }\n  }, \"ERROR\");\n  if (!data) return __jsx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 21\n    }\n  }, \"Not found\");\n  console.log(`Query Data: ${data.restaurants}`); // filter restaurants based on search query\n\n  const filteredRestaurants = data.restaurants.filter(res => {\n    return res.name.toLowerCase().includes(props.search);\n  });\n\n  const filterDishes = restaurant => {\n    if (!searchDishes) {\n      return true;\n    }\n\n    const filteredDishes = restaurant.dishes.filter(dish => {\n      return dish.name.toLowerCase().includes(searchDishes.toLowerCase());\n    });\n    return filteredDishes.length > 0;\n  };\n\n  const filterDrinks = restaurant => {\n    if (!searchDrinks) {\n      return true;\n    }\n\n    const filteredDrinks = restaurant.drinks.filter(drink => {\n      return drink.name.toLowerCase().includes(searchDrinks.toLowerCase());\n    });\n    return filteredDrinks.length > 0;\n  };\n\n  const restId = searchQuery.length > 0 ? searchQuery[0].id : null; // define renderer for Dishes\n\n  const renderDishes = restaurantID => {\n    if (restaurantID) {\n      const restaurant = data.restaurants.find(res => res.id === restaurantID);\n      const filteredDishes = restaurant.dishes.filter(filterDishes);\n\n      if (filteredDishes.length > 0) {\n        return __jsx(Dishes, {\n          dishes: filteredDishes,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 95,\n            columnNumber: 16\n          }\n        });\n      } else {\n        return __jsx(\"p\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 97,\n            columnNumber: 16\n          }\n        }, \"No dishes found.\");\n      }\n    } else {\n      return null;\n    }\n  };\n\n  const renderDrinks = restaurantID => {\n    if (restaurantID) {\n      const restaurant = data.restaurants.find(res => res.id === restaurantID);\n      const filteredDrinks = restaurant.drinks.filter(filterDrinks);\n\n      if (filteredDrinks.length > 0) {\n        return __jsx(Drinks, {\n          drinks: filteredDrinks,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 109,\n            columnNumber: 16\n          }\n        });\n      } else {\n        return __jsx(\"p\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 111,\n            columnNumber: 16\n          }\n        }, \"No drinks found.\");\n      }\n    } else {\n      return null;\n    }\n  }; // render all restaurants if there is no search query\n\n\n  if (!props.search) {\n    const restList = data.restaurants.map(res => __jsx(Col, {\n      xs: \"6\",\n      sm: \"4\",\n      key: res.id,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 7\n      }\n    }, __jsx(Card, {\n      style: {\n        margin: \"0 0.5rem 20px 0.5rem\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 9\n      }\n    }, __jsx(CardImg, {\n      top: true,\n      style: {\n        height: 200\n      },\n      src: `http://localhost:1337` + res.image.url,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 11\n      }\n    }), __jsx(CardBody, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 11\n      }\n    }, __jsx(CardText, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 131,\n        columnNumber: 13\n      }\n    }, res.description)), __jsx(\"div\", {\n      className: \"card-footer\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 133,\n        columnNumber: 11\n      }\n    }, __jsx(Button, {\n      color: \"info\",\n      onClick: () => setRestaurantID(res.id),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 134,\n        columnNumber: 13\n      }\n    }, res.name)))));\n    return __jsx(Container, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 141,\n        columnNumber: 7\n      }\n    }, __jsx(Row, {\n      xs: \"3\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 142,\n        columnNumber: 9\n      }\n    }, restList), __jsx(Row, {\n      xs: \"3\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 146,\n        columnNumber: 9\n      }\n    }, renderDishes(restaurantID)), __jsx(Row, {\n      xs: \"3\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 150,\n        columnNumber: 9\n      }\n    }, renderDrinks(restaurantID)));\n  } else if (filteredRestaurants.length > 0) {\n    // render filtered restaurants if there is a search query\n    const restList = filteredRestaurants.map(res => __jsx(Col, {\n      xs: \"6\",\n      sm: \"4\",\n      key: res.id,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 159,\n        columnNumber: 7\n      }\n    }, __jsx(Card, {\n      style: {\n        margin: \"0 0.5rem 20px 0.5rem\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 160,\n        columnNumber: 9\n      }\n    }, __jsx(CardImg, {\n      top: true,\n      style: {\n        height: 200\n      },\n      src: `http://localhost:1337${res.image.url}`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 161,\n        columnNumber: 11\n      }\n    }), __jsx(CardBody, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 166,\n        columnNumber: 11\n      }\n    }, __jsx(CardTitle, {\n      tag: \"h5\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 167,\n        columnNumber: 13\n      }\n    }, res.name), __jsx(CardText, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 168,\n        columnNumber: 13\n      }\n    }, res.description)), __jsx(\"div\", {\n      className: \"card-footer\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 170,\n        columnNumber: 11\n      }\n    }, __jsx(Button, {\n      color: \"info\",\n      onClick: () => setRestaurantID(res.id),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 171,\n        columnNumber: 13\n      }\n    }, \"View Menu\")))));\n    return __jsx(Container, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 179,\n        columnNumber: 7\n      }\n    }, __jsx(Row, {\n      xs: \"3\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 180,\n        columnNumber: 9\n      }\n    }, restList), __jsx(Row, {\n      xs: \"3\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 181,\n        columnNumber: 9\n      }\n    }, renderDishes(restaurantID)), __jsx(Row, {\n      xs: \"3\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 182,\n        columnNumber: 9\n      }\n    }, renderDrinks(restaurantID)));\n  } else {\n    // render all restaurants if there is no search query\n    const restList = data.restaurants.map(res => __jsx(Col, {\n      xs: \"6\",\n      sm: \"4\",\n      key: res.id,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 188,\n        columnNumber: 7\n      }\n    }, __jsx(Card, {\n      style: {\n        margin: \"0 0.5rem 20px 0.5rem\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 189,\n        columnNumber: 9\n      }\n    }, __jsx(CardImg, {\n      top: true,\n      style: {\n        height: 200\n      },\n      src: `http://localhost:1337${res.image.url}`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 190,\n        columnNumber: 11\n      }\n    }), __jsx(CardBody, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 195,\n        columnNumber: 11\n      }\n    }, __jsx(CardTitle, {\n      tag: \"h5\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 196,\n        columnNumber: 13\n      }\n    }, res.name), __jsx(CardText, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 197,\n        columnNumber: 13\n      }\n    }, res.description)), __jsx(\"div\", {\n      className: \"card-footer\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 199,\n        columnNumber: 11\n      }\n    }, __jsx(Button, {\n      color: \"info\",\n      onClick: () => setRestaurantID(res.id),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 200,\n        columnNumber: 13\n      }\n    }, \"View Menu\")))));\n    return __jsx(Container, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 208,\n        columnNumber: 7\n      }\n    }, __jsx(Row, {\n      xs: \"3\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 209,\n        columnNumber: 9\n      }\n    }, restList), __jsx(Row, {\n      xs: \"3\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 210,\n        columnNumber: 9\n      }\n    }, renderDishes(restaurantID)), __jsx(Row, {\n      xs: \"3\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 211,\n        columnNumber: 9\n      }\n    }, renderDrinks(restaurantID)));\n  }\n}\n\n;\nexport default RestaurantList;","map":{"version":3,"sources":["C:/Users/X/Desktop/MIT-Bootcamp-WebDev/Week29/setting-up-stripe_starter/components/restaurantList.js"],"names":["gql","useQuery","Dishes","useContext","useState","Drinks","AppContext","Button","Card","CardBody","CardImg","CardText","CardTitle","Container","Row","Col","RestaurantList","props","searchQuery","setSearchQuery","search","restaurantID","setRestaurantID","cart","state","setState","GET_RESTAURANTS","searchDishes","setSearchDishes","searchDrinks","setSearchDrinks","loading","error","data","console","log","restaurants","filteredRestaurants","filter","res","name","toLowerCase","includes","filterDishes","restaurant","filteredDishes","dishes","dish","length","filterDrinks","filteredDrinks","drinks","drink","restId","id","renderDishes","find","renderDrinks","restList","map","margin","height","image","url","description"],"mappings":";;;AAAA,SAASA,GAAT,EAAcC,QAAd,QAA8B,gBAA9B;AACA,OAAOC,MAAP,MAAmB,UAAnB;AACA,SAASC,UAAT,EAAqBC,QAArB,QAAqC,OAArC;AACA,OAAOC,MAAP,MAAmB,UAAnB;AAEA,OAAOC,UAAP,MAAuB,WAAvB;AAEA,SACEC,MADF,EAEEC,IAFF,EAGEC,QAHF,EAIEC,OAJF,EAKEC,QALF,EAMEC,SANF,EAOEC,SAPF,EAQEC,GARF,EASEC,GATF,QAUO,YAVP;;AAYA,SAASC,cAAT,CAAwBC,KAAxB,EAA+B;AAC7B,QAAM;AAAA,OAACC,WAAD;AAAA,OAAcC;AAAd,MAAgCf,QAAQ,CAACa,KAAK,CAACG,MAAP,CAA9C;AAEA,QAAM;AAAA,OAACC,YAAD;AAAA,OAAeC;AAAf,MAAkClB,QAAQ,CAAC,CAAD,CAAhD;AACA,QAAM;AAAEmB,IAAAA;AAAF,MAAWpB,UAAU,CAACG,UAAD,CAA3B;AACA,QAAM;AAAA,OAACkB,KAAD;AAAA,OAAQC;AAAR,MAAoBrB,QAAQ,CAACmB,IAAD,CAAlC;AACA,QAAMG,eAAe,GAAG1B,GAAI;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CA3BE;AA4BF,QAAM;AAAA,OAAC2B,YAAD;AAAA,OAAeC;AAAf,MAAkCxB,QAAQ,CAAC,EAAD,CAAhD;AACA,QAAM;AAAA,OAACyB,YAAD;AAAA,OAAeC;AAAf,MAAkC1B,QAAQ,CAAC,EAAD,CAAhD;AAEE,QAAM;AAAE2B,IAAAA,OAAF;AAAWC,IAAAA,KAAX;AAAkBC,IAAAA;AAAlB,MAA2BhC,QAAQ,CAACyB,eAAD,CAAzC;AACA,MAAIK,OAAJ,EAAa,OAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAAP;AACb,MAAIC,KAAJ,EAAW,OAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aAAP;AACX,MAAI,CAACC,IAAL,EAAW,OAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBAAP;AACXC,EAAAA,OAAO,CAACC,GAAR,CAAa,eAAcF,IAAI,CAACG,WAAY,EAA5C,EAzC6B,CA2C7B;;AACA,QAAMC,mBAAmB,GAAGJ,IAAI,CAACG,WAAL,CAAiBE,MAAjB,CAAyBC,GAAD,IAAS;AAC3D,WAAOA,GAAG,CAACC,IAAJ,CAASC,WAAT,GAAuBC,QAAvB,CAAgCzB,KAAK,CAACG,MAAtC,CAAP;AACD,GAF2B,CAA5B;;AAGA,QAAMuB,YAAY,GAAIC,UAAD,IAAgB;AACnC,QAAI,CAACjB,YAAL,EAAmB;AACjB,aAAO,IAAP;AACD;;AACD,UAAMkB,cAAc,GAAGD,UAAU,CAACE,MAAX,CAAkBR,MAAlB,CAA0BS,IAAD,IAAU;AACxD,aAAOA,IAAI,CAACP,IAAL,CAAUC,WAAV,GAAwBC,QAAxB,CAAiCf,YAAY,CAACc,WAAb,EAAjC,CAAP;AACD,KAFsB,CAAvB;AAGA,WAAOI,cAAc,CAACG,MAAf,GAAwB,CAA/B;AACD,GARD;;AAUA,QAAMC,YAAY,GAAIL,UAAD,IAAgB;AACnC,QAAI,CAACf,YAAL,EAAmB;AACjB,aAAO,IAAP;AACD;;AACD,UAAMqB,cAAc,GAAGN,UAAU,CAACO,MAAX,CAAkBb,MAAlB,CAA0Bc,KAAD,IAAW;AACzD,aAAOA,KAAK,CAACZ,IAAN,CAAWC,WAAX,GAAyBC,QAAzB,CAAkCb,YAAY,CAACY,WAAb,EAAlC,CAAP;AACD,KAFsB,CAAvB;AAGA,WAAOS,cAAc,CAACF,MAAf,GAAwB,CAA/B;AACD,GARD;;AAUA,QAAMK,MAAM,GAAGnC,WAAW,CAAC8B,MAAZ,GAAqB,CAArB,GAAyB9B,WAAW,CAAC,CAAD,CAAX,CAAeoC,EAAxC,GAA6C,IAA5D,CAnE6B,CAqE7B;;AACA,QAAMC,YAAY,GAAIlC,YAAD,IAAkB;AACrC,QAAIA,YAAJ,EAAkB;AAChB,YAAMuB,UAAU,GAAGX,IAAI,CAACG,WAAL,CAAiBoB,IAAjB,CAAuBjB,GAAD,IAASA,GAAG,CAACe,EAAJ,KAAWjC,YAA1C,CAAnB;AACA,YAAMwB,cAAc,GAAGD,UAAU,CAACE,MAAX,CAAkBR,MAAlB,CAAyBK,YAAzB,CAAvB;;AACA,UAAIE,cAAc,CAACG,MAAf,GAAwB,CAA5B,EAA+B;AAC7B,eAAO,MAAC,MAAD;AAAQ,UAAA,MAAM,EAAEH,cAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAAP;AACD,OAFD,MAEO;AACL,eAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,8BAAP;AACD;AACF,KARD,MAQO;AACL,aAAO,IAAP;AACD;AACF,GAZD;;AAcA,QAAMY,YAAY,GAAIpC,YAAD,IAAkB;AACrC,QAAIA,YAAJ,EAAkB;AAChB,YAAMuB,UAAU,GAAGX,IAAI,CAACG,WAAL,CAAiBoB,IAAjB,CAAuBjB,GAAD,IAASA,GAAG,CAACe,EAAJ,KAAWjC,YAA1C,CAAnB;AACA,YAAM6B,cAAc,GAAGN,UAAU,CAACO,MAAX,CAAkBb,MAAlB,CAAyBW,YAAzB,CAAvB;;AACA,UAAIC,cAAc,CAACF,MAAf,GAAwB,CAA5B,EAA+B;AAC7B,eAAO,MAAC,MAAD;AAAQ,UAAA,MAAM,EAAEE,cAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAAP;AACD,OAFD,MAEO;AACL,eAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,8BAAP;AACD;AACF,KARD,MAQO;AACL,aAAO,IAAP;AACD;AACF,GAZD,CApF6B,CAkG7B;;;AACA,MAAI,CAACjC,KAAK,CAACG,MAAX,EAAmB;AACjB,UAAMsC,QAAQ,GAAGzB,IAAI,CAACG,WAAL,CAAiBuB,GAAjB,CAAsBpB,GAAD,IACpC,MAAC,GAAD;AAAK,MAAA,EAAE,EAAC,GAAR;AAAY,MAAA,EAAE,EAAC,GAAf;AAAmB,MAAA,GAAG,EAAEA,GAAG,CAACe,EAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,MAAC,IAAD;AAAM,MAAA,KAAK,EAAE;AAAEM,QAAAA,MAAM,EAAE;AAAV,OAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,MAAC,OAAD;AACE,MAAA,GAAG,EAAE,IADP;AAEE,MAAA,KAAK,EAAE;AAAEC,QAAAA,MAAM,EAAE;AAAV,OAFT;AAGE,MAAA,GAAG,EACA,uBAAD,GAA0BtB,GAAG,CAACuB,KAAJ,CAAUC,GAJxC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,EAQE,MAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,MAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAWxB,GAAG,CAACyB,WAAf,CADF,CARF,EAWE;AAAK,MAAA,SAAS,EAAC,aAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,MAAC,MAAD;AAAQ,MAAA,KAAK,EAAC,MAAd;AAAqB,MAAA,OAAO,EAAE,MAAM1C,eAAe,CAACiB,GAAG,CAACe,EAAL,CAAnD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAA8Df,GAAG,CAACC,IAAlE,CADF,CAXF,CADF,CADe,CAAjB;AAoBA,WACE,MAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,MAAC,GAAD;AAAK,MAAA,EAAE,EAAC,GAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACGkB,QADH,CADF,EAKE,MAAC,GAAD;AAAK,MAAA,EAAE,EAAC,GAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACGH,YAAY,CAAClC,YAAD,CADf,CALF,EASE,MAAC,GAAD;AAAK,MAAA,EAAE,EAAC,GAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACGoC,YAAY,CAACpC,YAAD,CADf,CATF,CADF;AAeD,GApCD,MAoCO,IAAIgB,mBAAmB,CAACW,MAApB,GAA6B,CAAjC,EAAoC;AAEzC;AACA,UAAMU,QAAQ,GAAGrB,mBAAmB,CAACsB,GAApB,CAAyBpB,GAAD,IACvC,MAAC,GAAD;AAAK,MAAA,EAAE,EAAC,GAAR;AAAY,MAAA,EAAE,EAAC,GAAf;AAAmB,MAAA,GAAG,EAAEA,GAAG,CAACe,EAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,MAAC,IAAD;AAAM,MAAA,KAAK,EAAE;AAAEM,QAAAA,MAAM,EAAE;AAAV,OAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,MAAC,OAAD;AACE,MAAA,GAAG,EAAE,IADP;AAEE,MAAA,KAAK,EAAE;AAAEC,QAAAA,MAAM,EAAE;AAAV,OAFT;AAGE,MAAA,GAAG,EAAG,wBAAuBtB,GAAG,CAACuB,KAAJ,CAAUC,GAAI,EAH7C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,EAME,MAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,MAAC,SAAD;AAAW,MAAA,GAAG,EAAC,IAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAqBxB,GAAG,CAACC,IAAzB,CADF,EAEE,MAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAWD,GAAG,CAACyB,WAAf,CAFF,CANF,EAUE;AAAK,MAAA,SAAS,EAAC,aAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,MAAC,MAAD;AAAQ,MAAA,KAAK,EAAC,MAAd;AAAqB,MAAA,OAAO,EAAE,MAAM1C,eAAe,CAACiB,GAAG,CAACe,EAAL,CAAnD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBADF,CAVF,CADF,CADe,CAAjB;AAoBA,WACE,MAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,MAAC,GAAD;AAAK,MAAA,EAAE,EAAC,GAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAaI,QAAb,CADF,EAEE,MAAC,GAAD;AAAK,MAAA,EAAE,EAAC,GAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAaH,YAAY,CAAClC,YAAD,CAAzB,CAFF,EAGE,MAAC,GAAD;AAAK,MAAA,EAAE,EAAC,GAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAaoC,YAAY,CAACpC,YAAD,CAAzB,CAHF,CADF;AAOD,GA9BM,MA8BA;AACL;AACA,UAAMqC,QAAQ,GAAGzB,IAAI,CAACG,WAAL,CAAiBuB,GAAjB,CAAsBpB,GAAD,IACpC,MAAC,GAAD;AAAK,MAAA,EAAE,EAAC,GAAR;AAAY,MAAA,EAAE,EAAC,GAAf;AAAmB,MAAA,GAAG,EAAEA,GAAG,CAACe,EAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,MAAC,IAAD;AAAM,MAAA,KAAK,EAAE;AAAEM,QAAAA,MAAM,EAAE;AAAV,OAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,MAAC,OAAD;AACE,MAAA,GAAG,EAAE,IADP;AAEE,MAAA,KAAK,EAAE;AAAEC,QAAAA,MAAM,EAAE;AAAV,OAFT;AAGE,MAAA,GAAG,EAAG,wBAAuBtB,GAAG,CAACuB,KAAJ,CAAUC,GAAI,EAH7C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,EAME,MAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,MAAC,SAAD;AAAW,MAAA,GAAG,EAAC,IAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAqBxB,GAAG,CAACC,IAAzB,CADF,EAEE,MAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAWD,GAAG,CAACyB,WAAf,CAFF,CANF,EAUE;AAAK,MAAA,SAAS,EAAC,aAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,MAAC,MAAD;AAAQ,MAAA,KAAK,EAAC,MAAd;AAAqB,MAAA,OAAO,EAAE,MAAM1C,eAAe,CAACiB,GAAG,CAACe,EAAL,CAAnD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBADF,CAVF,CADF,CADe,CAAjB;AAoBA,WACE,MAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,MAAC,GAAD;AAAK,MAAA,EAAE,EAAC,GAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAaI,QAAb,CADF,EAEE,MAAC,GAAD;AAAK,MAAA,EAAE,EAAC,GAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAaH,YAAY,CAAClC,YAAD,CAAzB,CAFF,EAGE,MAAC,GAAD;AAAK,MAAA,EAAE,EAAC,GAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAaoC,YAAY,CAACpC,YAAD,CAAzB,CAHF,CADF;AAOD;AACF;;AAAA;AAED,eAAeL,cAAf","sourcesContent":["import { gql, useQuery } from '@apollo/client';\nimport Dishes from \"./dishes\"\nimport { useContext, useState } from 'react';\nimport Drinks from \"./drinks\";\n\nimport AppContext from \"./context\"\n\nimport {\n  Button,\n  Card,\n  CardBody,\n  CardImg,\n  CardText,\n  CardTitle,\n  Container,\n  Row,\n  Col\n} from \"reactstrap\";\n\nfunction RestaurantList(props) {\n  const [searchQuery, setSearchQuery] = useState(props.search);\n\n  const [restaurantID, setRestaurantID] = useState(0)\n  const { cart } = useContext(AppContext);\n  const [state, setState] = useState(cart)\n  const GET_RESTAURANTS = gql`\n  query {\n    restaurants {\n      id\n      name\n      description\n      image {\n        url\n      }\n      dishes {\n        id\n        name\n        price\n        image {\n          url\n        }\n      }\n      drinks {\n        id\n        name\n        price\n        image {\n          url\n        }\n      }\n    }\n  }\n`;\nconst [searchDishes, setSearchDishes] = useState(\"\");\nconst [searchDrinks, setSearchDrinks] = useState(\"\");\n\n  const { loading, error, data } = useQuery(GET_RESTAURANTS)\n  if (loading) return <p>Loading...</p>;\n  if (error) return <p>ERROR</p>;\n  if (!data) return <p>Not found</p>;\n  console.log(`Query Data: ${data.restaurants}`)\n\n  // filter restaurants based on search query\n  const filteredRestaurants = data.restaurants.filter((res) => {\n    return res.name.toLowerCase().includes(props.search)\n  })\n  const filterDishes = (restaurant) => {\n    if (!searchDishes) {\n      return true;\n    }\n    const filteredDishes = restaurant.dishes.filter((dish) => {\n      return dish.name.toLowerCase().includes(searchDishes.toLowerCase());\n    });\n    return filteredDishes.length > 0;\n  };\n  \n  const filterDrinks = (restaurant) => {\n    if (!searchDrinks) {\n      return true;\n    }\n    const filteredDrinks = restaurant.drinks.filter((drink) => {\n      return drink.name.toLowerCase().includes(searchDrinks.toLowerCase());\n    });\n    return filteredDrinks.length > 0;\n  };\n  \n  const restId = searchQuery.length > 0 ? searchQuery[0].id : null;\n\n  // define renderer for Dishes\n  const renderDishes = (restaurantID) => {\n    if (restaurantID) {\n      const restaurant = data.restaurants.find((res) => res.id === restaurantID);\n      const filteredDishes = restaurant.dishes.filter(filterDishes);\n      if (filteredDishes.length > 0) {\n        return <Dishes dishes={filteredDishes} />;\n      } else {\n        return <p>No dishes found.</p>;\n      }\n    } else {\n      return null;\n    }\n  };\n  \n  const renderDrinks = (restaurantID) => {\n    if (restaurantID) {\n      const restaurant = data.restaurants.find((res) => res.id === restaurantID);\n      const filteredDrinks = restaurant.drinks.filter(filterDrinks);\n      if (filteredDrinks.length > 0) {\n        return <Drinks drinks={filteredDrinks} />;\n      } else {\n        return <p>No drinks found.</p>;\n      }\n    } else {\n      return null;\n    }\n  };\n  \n  // render all restaurants if there is no search query\n  if (!props.search) {\n    const restList = data.restaurants.map((res) => (\n      <Col xs=\"6\" sm=\"4\" key={res.id}>\n        <Card style={{ margin: \"0 0.5rem 20px 0.5rem\" }}>\n          <CardImg\n            top={true}\n            style={{ height: 200 }}\n            src={\n              `http://localhost:1337` + res.image.url\n            }\n          />\n          <CardBody>\n            <CardText>{res.description}</CardText>\n          </CardBody>\n          <div className=\"card-footer\">\n            <Button color=\"info\" onClick={() => setRestaurantID(res.id)}>{res.name}</Button>\n          </div>\n        </Card>\n      </Col>\n    ))\n\n    return (\n      <Container>\n        <Row xs='3'>\n          {restList}\n        </Row>\n\n        <Row xs='3'>\n          {renderDishes(restaurantID)}\n        </Row>\n\n        <Row xs='3'>\n          {renderDrinks(restaurantID)}\n        </Row>\n      </Container>\n    )\n  } else if (filteredRestaurants.length > 0) {\n    \n    // render filtered restaurants if there is a search query\n    const restList = filteredRestaurants.map((res) => (\n      <Col xs=\"6\" sm=\"4\" key={res.id}>\n        <Card style={{ margin: \"0 0.5rem 20px 0.5rem\" }}>\n          <CardImg\n            top={true}\n            style={{ height: 200 }}\n            src={`http://localhost:1337${res.image.url}`}\n          />\n          <CardBody>\n            <CardTitle tag=\"h5\">{res.name}</CardTitle>\n            <CardText>{res.description}</CardText>\n          </CardBody>\n          <div className=\"card-footer\">\n            <Button color=\"info\" onClick={() => setRestaurantID(res.id)}>\n              View Menu\n            </Button>\n          </div>\n        </Card>\n      </Col>\n    ));\n    return (\n      <Container>\n        <Row xs=\"3\">{restList}</Row>\n        <Row xs=\"3\">{renderDishes(restaurantID)}</Row>\n        <Row xs=\"3\">{renderDrinks(restaurantID)}</Row>\n      </Container>\n    );\n  } else {\n    // render all restaurants if there is no search query\n    const restList = data.restaurants.map((res) => (\n      <Col xs=\"6\" sm=\"4\" key={res.id}>\n        <Card style={{ margin: \"0 0.5rem 20px 0.5rem\" }}>\n          <CardImg\n            top={true}\n            style={{ height: 200 }}\n            src={`http://localhost:1337${res.image.url}`}\n          />\n          <CardBody>\n            <CardTitle tag=\"h5\">{res.name}</CardTitle>\n            <CardText>{res.description}</CardText>\n          </CardBody>\n          <div className=\"card-footer\">\n            <Button color=\"info\" onClick={() => setRestaurantID(res.id)}>\n              View Menu\n            </Button>\n          </div>\n        </Card>\n      </Col>\n    ));\n    return (\n      <Container>\n        <Row xs=\"3\">{restList}</Row>\n        <Row xs=\"3\">{renderDishes(restaurantID)}</Row>\n        <Row xs=\"3\">{renderDrinks(restaurantID)}</Row>\n      </Container>\n    );\n  }\n};\n\nexport default RestaurantList;\n"]},"metadata":{},"sourceType":"module"}