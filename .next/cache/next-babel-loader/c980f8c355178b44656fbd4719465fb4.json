{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\X\\\\Desktop\\\\MIT-Bootcamp-WebDev\\\\Week29\\\\setting-up-stripe_starter\\\\pages\\\\receipts.js\";\nvar __jsx = React.createElement;\nimport React, { useState, useEffect } from \"react\";\nimport { getUserFromLocalStorage } from \"../components/auth\"; //importing the getUserFromLocalStorage function to get the currently logged in user. step-1.\n\nfunction Receipts() {\n  const {\n    0: orders,\n    1: setOrders\n  } = useState([]); //hook will store list of orders. step-2\n\n  const API_URL = process.env.NEXT_PUBLIC_API_URL || \"http://localhost:1337\"; //set up the api url. step-3.\n\n  useEffect(() => {\n    //hook to fetch the orders data from the Strapi API, using the logged in user's ID as a query parameter.step-4.\n    const fetchData = async () => {\n      try {\n        const user = getUserFromLocalStorage();\n\n        if (!user) {\n          console.log(\"User not found in local storage\");\n          return;\n        }\n\n        const response = await fetch(`${API_URL}/orders?user=${user.id}`, {\n          headers: {\n            Authorization: `Bearer ${user.jwt}`\n          }\n        });\n        const data = await response.json();\n        setOrders(data);\n      } catch (error) {\n        console.log(error);\n      }\n    };\n\n    fetchData();\n  }, []); //map orders. step-5.\n  //divded the amount by 100 to fix to a dollar.\n  //added a new status field. admin can set status in the panel. \n  //next step make a new page just for workers who can set status to shiped or delivered.   \n\n  return __jsx(\"div\", {\n    style: {\n      marginBottom: \"2rem\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 5\n    }\n  }, __jsx(\"h1\", {\n    style: {\n      fontSize: \"2rem\",\n      marginBottom: \"1rem\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 7\n    }\n  }, \"Order History\"), orders.map((order, index) => __jsx(\"div\", {\n    key: order.id,\n    style: {\n      fontSize: \"1.5rem\",\n      border: \"1px solid #ccc\",\n      background: \"white\",\n      padding: \"1rem\",\n      marginBottom: index === orders.length - 1 ? 0 : \"1rem\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 9\n    }\n  }, __jsx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 11\n    }\n  }, \"Order ID: \", order.id), __jsx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 11\n    }\n  }, \"Amount: $\", order.amount / 100), __jsx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 11\n    }\n  }, \"Status: \", order.status))));\n}\n\nexport default Receipts;","map":{"version":3,"sources":["C:/Users/X/Desktop/MIT-Bootcamp-WebDev/Week29/setting-up-stripe_starter/pages/receipts.js"],"names":["React","useState","useEffect","getUserFromLocalStorage","Receipts","orders","setOrders","API_URL","process","env","NEXT_PUBLIC_API_URL","fetchData","user","console","log","response","fetch","id","headers","Authorization","jwt","data","json","error","marginBottom","fontSize","map","order","index","border","background","padding","length","amount","status"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,SAASC,uBAAT,QAAwC,oBAAxC,C,CACA;;AACA,SAASC,QAAT,GAAoB;AAClB,QAAM;AAAA,OAACC,MAAD;AAAA,OAASC;AAAT,MAAsBL,QAAQ,CAAC,EAAD,CAApC,CADkB,CACuB;;AACzC,QAAMM,OAAO,GAAGC,OAAO,CAACC,GAAR,CAAYC,mBAAZ,IAAmC,uBAAnD,CAFkB,CAE0D;;AAE5ER,EAAAA,SAAS,CAAC,MAAM;AAAC;AACf,UAAMS,SAAS,GAAG,YAAY;AAC5B,UAAI;AACF,cAAMC,IAAI,GAAGT,uBAAuB,EAApC;;AACA,YAAI,CAACS,IAAL,EAAW;AACTC,UAAAA,OAAO,CAACC,GAAR,CAAY,iCAAZ;AACA;AACD;;AAED,cAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAE,GAAET,OAAQ,gBAAeK,IAAI,CAACK,EAAG,EAAnC,EAAsC;AAChEC,UAAAA,OAAO,EAAE;AACPC,YAAAA,aAAa,EAAG,UAASP,IAAI,CAACQ,GAAI;AAD3B;AADuD,SAAtC,CAA5B;AAMA,cAAMC,IAAI,GAAG,MAAMN,QAAQ,CAACO,IAAT,EAAnB;AACAhB,QAAAA,SAAS,CAACe,IAAD,CAAT;AACD,OAfD,CAeE,OAAOE,KAAP,EAAc;AACdV,QAAAA,OAAO,CAACC,GAAR,CAAYS,KAAZ;AACD;AACF,KAnBD;;AAqBAZ,IAAAA,SAAS;AACV,GAvBQ,EAuBN,EAvBM,CAAT,CAJkB,CA4BlB;AACA;AACA;AACA;;AACA,SACE;AAAK,IAAA,KAAK,EAAE;AAACa,MAAAA,YAAY,EAAE;AAAf,KAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAI,IAAA,KAAK,EAAE;AAAEC,MAAAA,QAAQ,EAAE,MAAZ;AAAoBD,MAAAA,YAAY,EAAE;AAAlC,KAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBADF,EAEGnB,MAAM,CAACqB,GAAP,CAAW,CAACC,KAAD,EAAQC,KAAR,KACV;AAAK,IAAA,GAAG,EAAED,KAAK,CAACV,EAAhB;AAAoB,IAAA,KAAK,EAAE;AACvBQ,MAAAA,QAAQ,EAAE,QADa;AAEvBI,MAAAA,MAAM,EAAE,gBAFe;AAGvBC,MAAAA,UAAU,EAAE,OAHW;AAIvBC,MAAAA,OAAO,EAAE,MAJc;AAINP,MAAAA,YAAY,EAAEI,KAAK,KAAKvB,MAAM,CAAC2B,MAAP,GAAgB,CAA1B,GAA8B,CAA9B,GAAkC;AAJ1C,KAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAKE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAAcL,KAAK,CAACV,EAApB,CALF,EAME;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAAaU,KAAK,CAACM,MAAN,GAAe,GAA5B,CANF,EAOE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBAAYN,KAAK,CAACO,MAAlB,CAPF,CADD,CAFH,CADF;AAgBD;;AAED,eAAe9B,QAAf","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport { getUserFromLocalStorage } from \"../components/auth\";\r\n//importing the getUserFromLocalStorage function to get the currently logged in user. step-1.\r\nfunction Receipts() {\r\n  const [orders, setOrders] = useState([]);//hook will store list of orders. step-2\r\n  const API_URL = process.env.NEXT_PUBLIC_API_URL || \"http://localhost:1337\"; //set up the api url. step-3.\r\n\r\n  useEffect(() => {//hook to fetch the orders data from the Strapi API, using the logged in user's ID as a query parameter.step-4.\r\n    const fetchData = async () => {\r\n      try {\r\n        const user = getUserFromLocalStorage();\r\n        if (!user) {\r\n          console.log(\"User not found in local storage\");\r\n          return;\r\n        }\r\n\r\n        const response = await fetch(`${API_URL}/orders?user=${user.id}`, {\r\n          headers: {\r\n            Authorization: `Bearer ${user.jwt}`,\r\n          },\r\n        });\r\n\r\n        const data = await response.json();\r\n        setOrders(data);\r\n      } catch (error) {\r\n        console.log(error);\r\n      }\r\n    };\r\n\r\n    fetchData();\r\n  }, []);\r\n  //map orders. step-5.\r\n  //divded the amount by 100 to fix to a dollar.\r\n  //added a new status field. admin can set status in the panel. \r\n  //next step make a new page just for workers who can set status to shiped or delivered.   \r\n  return (\r\n    <div style={{marginBottom: \"2rem\" }} >\r\n      <h1 style={{ fontSize: \"2rem\", marginBottom: \"1rem\" }}>Order History</h1>\r\n      {orders.map((order, index) => (\r\n        <div key={order.id} style={{ \r\n            fontSize: \"1.5rem\",\r\n            border: \"1px solid #ccc\",\r\n            background: \"white\",\r\n            padding: \"1rem\", marginBottom: index === orders.length - 1 ? 0 : \"1rem\"}}>\r\n          <p>Order ID: {order.id}</p>\r\n          <p>Amount: ${order.amount / 100}</p>\r\n          <p>Status: {order.status}</p>\r\n        </div>\r\n      ))}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Receipts;\r\n"]},"metadata":{},"sourceType":"module"}