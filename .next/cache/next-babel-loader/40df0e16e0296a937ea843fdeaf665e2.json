{"ast":null,"code":"import React from \"react\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { useContext, useState, useEffect } from \"react\";\nimport Head from \"next/head\";\nimport AppContext from \"../components/context\";\nimport Home from \"./index\";\nimport Layout from \"../components/layout\";\nimport Cookie from \"js-cookie\";\n\nfunction MyApp(props) {\n  const {\n    cart,\n    addItem,\n    removeItem,\n    user,\n    setUser\n  } = useContext(AppContext);\n  const {\n    0: state,\n    1: setState\n  } = useState({\n    cart: cart,\n    user: user\n  });\n  const {\n    Component,\n    pageProps\n  } = props; //last good no errors\n\n  useEffect(() => {\n    const localUser = window.localStorage.getItem(\"user\");\n\n    if (localUser) {\n      setState(_objectSpread(_objectSpread({}, state), {}, {\n        user: JSON.parse(localUser)\n      }));\n    }\n  }, []);\n\n  const handleSetUser = user => {\n    setState(_objectSpread(_objectSpread({}, state), {}, {\n      user: user,\n      isAuthenticated: !!user\n    }));\n    window.localStorage.setItem(\"user\", JSON.stringify(user));\n  };\n\n  const handleAddItem = item => {\n    const {\n      items\n    } = state.cart; // Check if item is already in cart\n\n    const foundItem = items.find(i => i.id === item.id);\n\n    if (foundItem) {\n      // If item is already in cart, increase quantity\n      const newCart = {\n        items: items.map(item => {\n          if (item.id === foundItem.id) {\n            return _objectSpread(_objectSpread({}, item), {}, {\n              quantity: item.quantity + 1\n            });\n          } else {\n            return item;\n          }\n        }),\n        total: state.cart.total + item.price\n      };\n      setState({\n        cart: newCart,\n        user: state.user\n      });\n      Cookie.set(\"cart\", newCart);\n    } else {\n      // If item is not in cart, add it\n      const newCart = {\n        items: [...state.cart.items, _objectSpread(_objectSpread({}, item), {}, {\n          quantity: 1\n        })],\n        total: state.cart.total + item.price\n      };\n      setState({\n        cart: newCart,\n        user: state.user\n      });\n      Cookie.set(\"cart\", newCart);\n    }\n  };\n\n  const handleRemoveItem = item => {\n    const {\n      items\n    } = state.cart; // Check if item is already in cart\n\n    const foundItem = items.find(i => i.id === item.id);\n\n    if (foundItem.quantity > 1) {\n      // If quantity is greater than 1, decrease quantity\n      const newCart = {\n        items: items.map(item => {\n          if (item.id === foundItem.id) {\n            return _objectSpread(_objectSpread({}, item), {}, {\n              quantity: item.quantity - 1\n            });\n          } else {\n            return item;\n          }\n        }),\n        total: state.cart.total - item.price\n      };\n      setState({\n        cart: newCart,\n        user: state.user\n      });\n      Cookie.set(\"cart\", newCart);\n    } else {\n      // If quantity is 1, remove item from cart\n      const newCart = {\n        items: items.filter(item => item.id !== foundItem.id),\n        total: state.cart.total - item.price\n      };\n      setState({\n        cart: newCart,\n        user: state.user\n      });\n      Cookie.set(\"cart\", newCart);\n    }\n  };\n\n  return __jsx(AppContext.Provider, {\n    value: {\n      cart: state.cart,\n      addItem: handleAddItem,\n      removeItem: handleRemoveItem,\n      isAuthenticated: !!user,\n      user: state.user,\n      setUser: handleSetUser\n    }\n  }, __jsx(Head, null, __jsx(\"link\", {\n    rel: \"stylesheet\",\n    href: \"https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0/css/bootstrap.min.css\",\n    integrity: \"sha384-Gn5384xqQ1aoWXA+058RXPxPg6fy4IWvTNh0E263XmFcJlSAwiGgFAW/dAiS6JXm\",\n    crossOrigin: \"anonymous\"\n  })), __jsx(Layout, null, __jsx(Component, pageProps)));\n}\n\nexport default MyApp;","map":null,"metadata":{},"sourceType":"module"}