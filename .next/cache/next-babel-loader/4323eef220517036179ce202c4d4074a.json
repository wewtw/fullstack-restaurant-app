{"ast":null,"code":"import _taggedTemplateLiteral from \"@babel/runtime/helpers/esm/taggedTemplateLiteral\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\X\\\\Desktop\\\\MIT-Bootcamp-WebDev\\\\Week29\\\\setting-up-stripe_starter\\\\components\\\\restaurantList.js\",\n    _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n    query {\\n      restaurants {\\n        id\\n        name\\n        description\\n        image {\\n          url\\n        }\\n        dishes {\\n          id\\n          name\\n          description\\n          price\\n        }\\n        drinks {\\n          id\\n          price\\n          name\\n          description\\n        }\\n      }\\n    }\\n  \"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport React, { useState, useContext } from \"react\";\nimport { gql, useQuery } from \"@apollo/client\";\nimport Dishes from \"./dishes\";\nimport Drinks from \"./drinks\";\nimport AppContext from \"./context\";\nimport { Button, Card, CardBody, CardImg, CardText, CardTitle, Col, Container, Row } from \"reactstrap\";\n\nfunction RestaurantList(props) {\n  _s();\n\n  var _this = this;\n\n  var _useContext = useContext(AppContext),\n      cart = _useContext.cart;\n\n  var _useState = useState(cart),\n      state = _useState[0],\n      setState = _useState[1];\n\n  var _useState2 = useState(\"\"),\n      search = _useState2[0],\n      setSearch = _useState2[1];\n\n  var _useState3 = useState(null),\n      selectedRestaurant = _useState3[0],\n      setSelectedRestaurant = _useState3[1];\n\n  var GET_RESTAURANTS = gql(_templateObject());\n\n  var _useQuery = useQuery(GET_RESTAURANTS),\n      loading = _useQuery.loading,\n      error = _useQuery.error,\n      data = _useQuery.data;\n\n  var handleSearchChange = function handleSearchChange(e) {\n    setSearch(e.target.value);\n  };\n\n  var handleRestaurantSelect = function handleRestaurantSelect(restaurant) {\n    setSelectedRestaurant(restaurant);\n  };\n\n  var renderMenu = function renderMenu() {\n    if (selectedRestaurant) {\n      return __jsx(React.Fragment, null, __jsx(Button, {\n        onClick: function onClick() {\n          return setSelectedRestaurant(null);\n        },\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 11\n        }\n      }, \"Back to restaurants\"), __jsx(\"h2\", {\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 66,\n          columnNumber: 11\n        }\n      }, selectedRestaurant.name, \" menu:\"), __jsx(Dishes, {\n        dishes: selectedRestaurant.dishes,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 67,\n          columnNumber: 11\n        }\n      }), __jsx(Drinks, {\n        drinks: selectedRestaurant.drinks,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 11\n        }\n      }));\n    } else {\n      return __jsx(React.Fragment, null, __jsx(\"h2\", {\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 74,\n          columnNumber: 11\n        }\n      }, \"Restaurants:\"), __jsx(\"input\", {\n        type: \"text\",\n        placeholder: \"Search\",\n        value: search,\n        onChange: handleSearchChange,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 11\n        }\n      }), __jsx(Container, {\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 81,\n          columnNumber: 11\n        }\n      }, __jsx(Row, {\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 13\n        }\n      }, data.restaurants.filter(function (restaurant) {\n        return restaurant.name.toLowerCase().includes(search.toLowerCase());\n      }).map(function (restaurant) {\n        return __jsx(Col, {\n          xs: 12,\n          md: 4,\n          key: restaurant.id,\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 88,\n            columnNumber: 19\n          }\n        }, __jsx(Card, {\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 89,\n            columnNumber: 21\n          }\n        }, __jsx(CardImg, {\n          top: true,\n          width: \"100%\",\n          src: restaurant.image.url,\n          alt: restaurant.name,\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 90,\n            columnNumber: 23\n          }\n        }), __jsx(CardBody, {\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 96,\n            columnNumber: 23\n          }\n        }, __jsx(CardTitle, {\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 97,\n            columnNumber: 25\n          }\n        }, restaurant.name), __jsx(CardText, {\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 98,\n            columnNumber: 25\n          }\n        }, restaurant.description), __jsx(Button, {\n          onClick: function onClick() {\n            return handleRestaurantSelect(restaurant);\n          },\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 99,\n            columnNumber: 25\n          }\n        }, \"View menu\"))));\n      }))));\n    }\n  };\n\n  return renderMenu();\n}\n\n_s(RestaurantList, \"pc3araL/eTorYmfBvKKY1kMYz1U=\", false, function () {\n  return [useQuery];\n});\n\n_c = RestaurantList;\nexport default RestaurantList;\n\nvar _c;\n\n$RefreshReg$(_c, \"RestaurantList\");","map":{"version":3,"sources":["C:/Users/X/Desktop/MIT-Bootcamp-WebDev/Week29/setting-up-stripe_starter/components/restaurantList.js"],"names":["React","useState","useContext","gql","useQuery","Dishes","Drinks","AppContext","Button","Card","CardBody","CardImg","CardText","CardTitle","Col","Container","Row","RestaurantList","props","cart","state","setState","search","setSearch","selectedRestaurant","setSelectedRestaurant","GET_RESTAURANTS","loading","error","data","handleSearchChange","e","target","value","handleRestaurantSelect","restaurant","renderMenu","name","dishes","drinks","restaurants","filter","toLowerCase","includes","map","id","image","url","description"],"mappings":"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","sourcesContent":["import React, { useState, useContext } from \"react\";\nimport { gql, useQuery } from \"@apollo/client\";\nimport Dishes from \"./dishes\";\nimport Drinks from \"./drinks\";\nimport AppContext from \"./context\";\nimport {\n  Button,\n  Card,\n  CardBody,\n  CardImg,\n  CardText,\n  CardTitle,\n  Col,\n  Container,\n  Row,\n} from \"reactstrap\";\n\nfunction RestaurantList(props) {\n  const { cart } = useContext(AppContext);\n  const [state, setState] = useState(cart);\n  const [search, setSearch] = useState(\"\");\n  const [selectedRestaurant, setSelectedRestaurant] = useState(null);\n\n  const GET_RESTAURANTS = gql`\n    query {\n      restaurants {\n        id\n        name\n        description\n        image {\n          url\n        }\n        dishes {\n          id\n          name\n          description\n          price\n        }\n        drinks {\n          id\n          price\n          name\n          description\n        }\n      }\n    }\n  `;\n\n  const { loading, error, data } = useQuery(GET_RESTAURANTS);\n\n  const handleSearchChange = (e) => {\n    setSearch(e.target.value);\n  };\n\n  const handleRestaurantSelect = (restaurant) => {\n    setSelectedRestaurant(restaurant);\n  };\n\n  const renderMenu = () => {\n    if (selectedRestaurant) {\n      return (\n        <>\n          <Button onClick={() => setSelectedRestaurant(null)}>\n            Back to restaurants\n          </Button>\n          <h2>{selectedRestaurant.name} menu:</h2>\n          <Dishes dishes={selectedRestaurant.dishes} />\n          <Drinks drinks={selectedRestaurant.drinks} />\n        </>\n      );\n    } else {\n      return (\n        <>\n          <h2>Restaurants:</h2>\n          <input\n            type=\"text\"\n            placeholder=\"Search\"\n            value={search}\n            onChange={handleSearchChange}\n          />\n          <Container>\n            <Row>\n              {data.restaurants\n                .filter((restaurant) =>\n                  restaurant.name.toLowerCase().includes(search.toLowerCase())\n                )\n                .map((restaurant) => (\n                  <Col xs={12} md={4} key={restaurant.id}>\n                    <Card>\n                      <CardImg\n                        top\n                        width=\"100%\"\n                        src={restaurant.image.url}\n                        alt={restaurant.name}\n                      />\n                      <CardBody>\n                        <CardTitle>{restaurant.name}</CardTitle>\n                        <CardText>{restaurant.description}</CardText>\n                        <Button\n                          onClick={() => handleRestaurantSelect(restaurant)}\n                        >\n                          View menu\n                        </Button>\n                      </CardBody>\n                    </Card>\n                  </Col>\n                ))}\n            </Row>\n          </Container>\n        </>\n      );\n    }\n  };\n\n  return renderMenu();\n}\nexport default RestaurantList;\n"]},"metadata":{},"sourceType":"module"}